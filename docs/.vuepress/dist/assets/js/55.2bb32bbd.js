(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{409:function(t,s,e){"use strict";e.r(s);var n=e(42),a=Object(n.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"一、状态管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、状态管理"}},[t._v("#")]),t._v(" 一、状态管理")]),t._v(" "),e("p",[t._v("HTTP 是无状态协议，认证成功的用户状态无法通过协议层面保存(即无法实现状态管理)；无状态虽在一定程度上能减轻服务器负担；但每次请求均需验证；实现状态管理，能减轻服务器负担，对服务安全也有一定帮助；")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("注意："),e("a",{attrs:{href:"https://www.zhihu.com/question/23202402",target:"_blank",rel:"noopener noreferrer"}},[t._v("并非真正意义上的无状态"),e("OutboundLink")],1),t._v(" & "),e("a",{attrs:{href:"https://www.zhihu.com/question/23202402/answer/527748675",target:"_blank",rel:"noopener noreferrer"}},[t._v("文章2"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[t._v("标准 JWT 本身并无任何技术实现，只是定义了 token-based 的管理方式如何实现，并规定 token 应包含的标准内容及 token 生成过程和方法；")])])]),t._v(" "),e("h3",{attrs:{id:"二、基于session认证-基于服务器的认证-有状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、基于session认证-基于服务器的认证-有状态"}},[t._v("#")]),t._v(" 二、基于Session认证/基于服务器的认证/有状态：")]),t._v(" "),e("p",[t._v("指在客户端存储一个Session Id，认证时，请求携带 Session Id，并由服务器从 Session 数据存储中找到对应的 Session；")]),t._v(" "),e("ul",[e("li",[t._v("注意：Session 通过 Cookie 在客户端保存 SessionID，而将用户的其他会话消息保存在服务端的 Session 对象；")]),t._v(" "),e("li",[t._v("注意：区别："),e("a",{attrs:{href:"https://www.cnblogs.com/jirglt/p/4200678.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("SessionID 和 JsessionID 的区别"),e("OutboundLink")],1),t._v("；")])]),t._v(" "),e("p",[e("strong",[e("u",[e("em",[t._v("基于 Session 的认证流程")])])]),t._v("：")]),t._v(" "),e("ul",[e("li",[t._v("首先：用户登录；")]),t._v(" "),e("li",[t._v("然后：Web服务器开辟内存空间Session用于保存用户的认证信息和其他信息；")]),t._v(" "),e("li",[t._v("然后：登录成功后通过 Set-Cookie 首部字段信息，通知客户端保存包含服务器端 Session 的 ID 的 Cookie；")]),t._v(" "),e("li",[t._v("然后：客户端在下次请求时客户端会带上该 Cookie 向服务器端发送请求；")]),t._v(" "),e("li",[t._v("最后：服务器端进行校验认证；")]),t._v(" "),e("li",[e("img",{staticStyle:{zoom:"50%"},attrs:{src:"/Image/Basics/Special/Status/1.png",align:"left"}})])]),t._v(" "),e("p",[e("strong",[e("u",[e("em",[t._v("基于 Session 的问题与解决")])])]),t._v("：")]),t._v(" "),e("p",[t._v("问题：集群问题：集群模式中的服务器负载均衡分配不同服务器；若某次登录为 A 服务器，二次登录为 B 服务器，若 Session 分开存放将导验证登录失败；")]),t._v(" "),e("ul",[e("li",[t._v("解决：将多个服务器存储的 Session 统一存储到某一介质，比如 Redis，但利用Redis搭建集群、进行主从同步复制、进行持久化等操作复杂、不100%可靠；\n"),e("ul",[e("li",[e("img",{staticStyle:{zoom:"40%"},attrs:{src:"/Image/Basics/Special/Status/2.png",align:"left"}})])])])]),t._v(" "),e("p",[t._v("问题：安全问题：Cookie 存在安全隐患：CSRF(跨站点伪造)、XSS、CORS；")]),t._v(" "),e("ul",[e("li",[t._v("解决：Token；")])]),t._v(" "),e("h3",{attrs:{id:"三、基于-token-认证-无状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、基于-token-认证-无状态"}},[t._v("#")]),t._v(" 三、基于 token 认证/无状态")]),t._v(" "),e("p",[t._v("指将所有认证相关的信息，在服务器端编码成一个Token，并由服务器用算法和密钥(不能泄露)签名，以确保不被篡改；")]),t._v(" "),e("p",[t._v("特性：无状态、可扩展、支持移动设备、跨程序调用、安全；")]),t._v(" "),e("ul",[e("li",[t._v("注意：Token本身是明文、存在Token里的信息可以有比如user id、权限列表、用户昵称一类的；")]),t._v(" "),e("li",[t._v("注意：服务器只要拿着token和token的签名，就可以直接验证用户的身份是合法的；")]),t._v(" "),e("li",[t._v("注意：服务器不必保留用户认证信息或会话信息，只需对token做验证处理并返回资源；")])]),t._v(" "),e("h4",{attrs:{id:"_3-1、普通-token-认证"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1、普通-token-认证"}},[t._v("#")]),t._v(" 3-1、普通 token 认证")]),t._v(" "),e("p",[t._v("认证流程：")]),t._v(" "),e("ul",[e("li",[t._v("首先：用户请求服务器；")]),t._v(" "),e("li",[t._v("然后：验证通过后，服务器发送给用户一个 token；")]),t._v(" "),e("li",[t._v("然后：客户端存储 token，并在每次请求时附送上此 token 值；")]),t._v(" "),e("li",[t._v("最后：服务端验证 token 值，并返回数据；")])]),t._v(" "),e("p",[t._v("另外：服务端要支持CORS策略，一般需设置 Access-Control-Allow-Origin:*；")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"/Image/Basics/Special/Status/3.png",align:"left"}}),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"/Image/Basics/Special/Status/4.png",align:"left"}}),t._v(" "),e("h4",{attrs:{id:"_3-2、实际-token-认证"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2、实际-token-认证"}},[t._v("#")]),t._v(" 3-2、实际 token 认证")]),t._v(" "),e("p",[t._v("token 即访问资源的凭证；一般是用户通过用户名和密码登录成功后，服务器将用户凭证做数字签名，加密后得到的字符串作为 token；")]),t._v(" "),e("p",[t._v("其在用户登录成功后会返回给客户端，客户端有如下几种存储方式：")]),t._v(" "),e("ul",[e("li",[t._v("存储在 "),e("code",[t._v("localStorage")]),t._v("中，每次调用接口时都将其当成一个字段传给后台；\n"),e("ul",[e("li",[t._v("注意：每次调用接口时放在 "),e("code",[t._v("HTTP")]),t._v(" 请求头的 "),e("code",[t._v("Authorization")]),t._v(" 字段中；")])])]),t._v(" "),e("li",[t._v("存储在 "),e("code",[t._v("cookie")]),t._v("中，让它自动发送，缺点是不能跨域；")])]),t._v(" "),e("h5",{attrs:{id:"_3-3-1、jwt-发展过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1、jwt-发展过程"}},[t._v("#")]),t._v(" 3-3-1、JWT 发展过程")]),t._v(" "),e("p",[t._v("基本：session 在数据库中保持用户及 token 对应信息，亦称有状态；")]),t._v(" "),e("p",[t._v("需求：实现在数据库中不保持用户状态也可登录；")]),t._v(" "),e("ul",[e("li",[t._v("方法1：前端直接传 user_id 给服务端；")]),t._v(" "),e("li",[t._v("问题：容易被用户篡改成任意 user_id，权限设置形同虚设；")]),t._v(" "),e("li",[t._v("改进：对 user_id 进行对称加密；服务端对user_id 进行对称加密后，作为token返回客户端，作为用户状态凭证；")]),t._v(" "),e("li",[t._v("问题：由于对称加密，选择合适的算法以及密钥比较重要；")]),t._v(" "),e("li",[t._v("改进：user_id 无需加密，只需进行签名，以保证不被篡改；")]),t._v(" "),e("li",[t._v("总结：上述即 JWT 思想，user_id、加密算法、签名组成 token一起存储到客户端，每当客户端请求接口时携带 token，服务器根据 token 解析出加密算法与 user_id 来判断签名是否一致；")])]),t._v(" "),e("h5",{attrs:{id:"_3-3-2、jwt-基本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2、jwt-基本"}},[t._v("#")]),t._v(" 3-3-2、JWT 基本")]),t._v(" "),e("p",[t._v("JSON Web令牌(JWT)，是在 RFC 7519 中定义为在双方间表示一组信息的安全方式；")]),t._v(" "),e("p",[e("strong",[e("u",[e("em",[t._v("JWT 结构")])])]),t._v("：是一种 JSON 对象，由头部(header)，负载(payload)、签名(signature)组成："),e("code",[t._v("base64(header).base64(json payload).signature")])]),t._v(" "),e("ul",[e("li",[t._v("header 头部：\n"),e("ul",[e("li",[e("img",{staticStyle:{zoom:"50%"},attrs:{src:"/Image/Basics/Special/Status/9.png",align:"left"}})])])]),t._v(" "),e("li",[t._v("payload 有效载荷：\n"),e("ul",[e("li",[t._v("基本：存放有效信息/存储在JWT内的数据；")]),t._v(" "),e("li",[t._v("公共声明：可添加任何的信息，一般添用户的相关或业务相关信息，该部分可在客户端解密；")]),t._v(" "),e("li",[t._v("私有声明：提供者和消费者所共同定义的声明，一般不建议存放敏感信息；")]),t._v(" "),e("li",[e("img",{staticStyle:{zoom:"50%"},attrs:{src:"/Image/Basics/Special/Status/6.png",align:"left"}})])])]),t._v(" "),e("li",[t._v("signature 签名：\n"),e("ul",[e("li",[e("img",{staticStyle:{zoom:"50%"},attrs:{src:"/Image/Basics/Special/Status/7.png",align:"left"}})]),t._v(" "),e("li",[t._v("注意：须采用头部 (header)，有效载荷(payload)，密钥(secret、上图密钥为 "),e("code",[t._v("secret字符")]),t._v(")，及头部中指定算法(上图为HMACSHA256 算法)")]),t._v(" "),e("li",[t._v("注意：payload 是明文，base64 并不是加密处理，而是简单编码；\n"),e("ul",[e("li",[t._v("编码数据的目的是：转换数据的结构；")]),t._v(" "),e("li",[t._v("签名加密的主要目的是：保护数据并防止未经授权的访问；")])])]),t._v(" "),e("li",[t._v("注意：密钥应保存在服务器端，不能外泄，不能在网络中传输，以保证安全性和唯一性；")]),t._v(" "),e("li",[t._v("注意：密钥作用：进行 JWT 签发和验证，JWT 的签发生成也在服务器端；")])])]),t._v(" "),e("li",[t._v("最后，"),e("strong",[e("u",[e("em",[t._v("上述三个结构用点符号连接即可构建 JWT token")])])]),t._v("；\n"),e("ul",[e("li",[e("img",{staticStyle:{zoom:"50%"},attrs:{src:"/Image/Basics/Special/Status/8.png",align:"left"}})])])])]),t._v(" "),e("p",[e("strong",[e("u",[e("em",[t._v("JWT 优劣：")])])])]),t._v(" "),e("ul",[e("li",[t._v("优势：构成简单、字节占用小、JSON类型通用性强、无状态、易于扩展、跨域的身份认证(单点登录)；")]),t._v(" "),e("li",[t._v("优势：下面的机制，签名确保 token 是服务器产生的，服务器只需验证 JWT 签名是正确的+起效中即可信任JWT包含的信息；")]),t._v(" "),e("li",[t._v("优势：无需 session 认证那样查询用户信息和用户权限即可作出相应的反应；")]),t._v(" "),e("li",[t._v("劣势：因为不用查询、及时响应，所以无法实现从服务器端对用户请求的管理 (统计登录、登录设备)；")]),t._v(" "),e("li",[t._v("劣势：因存在有效期，故 JWT 失效前，无法强行终止某一用户权限(类似控制转移)，若实现 token黑名单，则变相实现 Session 机制，变相加重服务器负担；")]),t._v(" "),e("li",[t._v("劣势：因为误用，规范表示 payload 只应存放认证相关信息，而往往被开发人员误用，为达到无状态，使其 JWT 尺寸过大，带宽损耗、IO性能损耗；")]),t._v(" "),e("li",[t._v("使用：一般在请求头中加入 Authorization，并加上 Bearer 标注：\n"),e("ul",[e("li",[e("img",{staticStyle:{zoom:"50%"},attrs:{src:"/Image/Basics/Special/Status/10.png",align:"left"}})])])])]),t._v(" "),e("p",[e("strong",[e("u",[e("em",[t._v("JWT 校验")])])]),t._v("：只有身份验证服务器和应用服务器知道密钥；")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("首先，当服务端开启身份验证时，服务端从身份验证服务器接收密钥；")])]),t._v(" "),e("li",[e("p",[t._v("然后，服务端拥有密钥，当用户向服务端进行 API 请求(携带 JWT)时，服务端便可执行与其 JWT 上的相同的签名算法；")])]),t._v(" "),e("li",[e("p",[t._v("最后，服务端验证：通过用户 JWT 得到的签名 与 通过认证服务得到的签名：")]),t._v(" "),e("ul",[e("li",[t._v("若签名匹配，则表示 JWT 有效，表示 API 调用来自可信源；")]),t._v(" "),e("li",[t._v("若签名不匹配，则表示 JWT 无效，拒绝处理或加入监视名单；")])])]),t._v(" "),e("li",[e("p",[t._v("注意：使用 JWT 的目的不是以任何方式隐藏或模糊数据，而是为了证明发送的数据是由真实的来源创建的；")])]),t._v(" "),e("li",[e("p",[t._v("注意：JWT 内数据是经过编码与签名，但并非加密，编码数据的目的是转换数据的结构；签名数据允许数据接收器验证数据源的真实性；")]),t._v(" "),e("ul",[e("li",[t._v("因此，编码和签名数据不会保护数据；")]),t._v(" "),e("li",[t._v("此外，加密的主要目的是：保护数据并防止未经授权访问，而由于 JWT 仅被签名和编码，且由于 JWT 未加密，因此 JWT 无法保证敏感数据的安全性；")])])]),t._v(" "),e("li",[e("p",[t._v("注意：JWT 应该通过 HTTPS 连接发送，HTTPS 有助于防止未经授权的用户通过使用它来窃取所发送的 JWT，从而无法拦截服务器和用户之间的通信；")])]),t._v(" "),e("li",[e("p",[t._v("注意：JWT 中应设置较短的过期时间，以避免旧 JWT 被盗用；")])]),t._v(" "),e("li",[e("img",{staticStyle:{zoom:"50%"},attrs:{src:"/Image/Basics/Special/Status/11.png",align:"left"}})]),t._v(" "),e("li",[e("img",{staticStyle:{zoom:"50%"},attrs:{src:"/Image/Basics/Special/Status/12.png",align:"left"}})])]),t._v(" "),e("p",[e("strong",[e("u",[e("em",[t._v("JWT 侵入：")])])])]),t._v(" "),e("p",[t._v("原因1：alg 设置为 none 不使用加密算法")]),t._v(" "),e("p",[t._v("原因2：HMAC 算法 和 RSA 算法：")]),t._v(" "),e("ul",[e("li",[t._v("前者：使用同一密钥对 token 进行签名与认证；")]),t._v(" "),e("li",[t._v("后者：需要2个密钥，先用私钥加密创建 token，然后使用其对应的公钥来认证；")]),t._v(" "),e("li",[t._v("注意：要保护好 HMAC 的密钥和 RSA 私钥信息，因为它们都是给 token 签名；")]),t._v(" "),e("li",[t._v("问题：使用 RSA签名，用私钥A签名后，用户用公钥B认证，此时，若攻击者把算法改为 HMAC，便能利用原 RSA下的公钥B来签名伪造 token，此法生成的token 同样有效；原因：公钥B也可用于签名 (因为HMAC是对称性加密算法)；")])]),t._v(" "),e("p",[t._v("原因3：暴力破解、KID操纵、密钥泄露等；")]),t._v(" "),e("p",[e("strong",[e("u",[t._v("JWT 应用：")])])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("图形验证码：登录时，输入密码错误次数过多会出现图形验证码，其原理是给客户端一图形，并在服务器端保存与这个图片配对的字符串，以前也大都通过 session 来实现；如此可把将验证码配对的字符串作为 secret，进行无状态校验；")]),t._v(" "),e("ul",[e("li",[e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" jwt "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jsonwebtoken"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 假设验证码为字符验证码，字符为 ACDE,10分钟失效")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" token "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" jwt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sign")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" secrect "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ACDE"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" expiresIn"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" codeImage "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getImageFromString")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ACDE"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 给前端的响应")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 验证码图片的 token,从中可以校验前端发送的验证码")]),t._v("\n  token"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 验证码图片")]),t._v("\n  codeImage"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])]),t._v(" "),e("li",[e("p",[t._v("短信验证码(与图形验证码同理)：现在网站在注册成功后会进行邮箱校验，具体做法是给邮箱发一个链接，用户点开链接校验成功；")]),t._v(" "),e("ul",[e("li",[e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把邮箱以及用户id绑定在一起")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" code "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" jwt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sign")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    email"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    userId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  secret"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" expiresIn"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在此链接校验验证码")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" link "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("https://example.com/code=")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("code"),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])])]),t._v(" "),e("p",[e("strong",[e("u",[e("em",[t._v("JWT 注意：")])])])]),t._v(" "),e("p",[t._v("当用户注销时，如何使 token 失效：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("因 jwt 无状态，不保存用户设备信息，无法单纯使用它完成以上问题，可以再利用数据库保存一些状态完成；")]),t._v(" "),e("ul",[e("li",[t._v("session：只需将 user_id 对应的 token 清掉即可；")]),t._v(" "),e("li",[t._v("jwt：使用 redis，维护黑名单，用户注销时将该 token 加入黑名单，过期时间与 jwt 的过期时间保持一致；")])])]),t._v(" "),e("li",[e("p",[t._v("如何允许用户只能在一个设备登录")]),t._v(" "),e("ul",[e("li",[t._v("session：若使用 sql 类数据库，在用户数据库表添加 token 字段并加索引，每次认证则重置 token 字段，每次请求权限接口时，根据 token 查找 user_id")]),t._v(" "),e("li",[t._v("jwt：若使用 sql类数据库，对用户数据库表添加 token字段(无需添加索引)，每次认证则重置 token字段，每次请求权限接口时，根据 jwt 获取 user_id，并根据 user_id 查用户表获取 token 判断 token 是否一致；另外也可使用计数器方法；")]),t._v(" "),e("li",[t._v("注意：此场景下，session 实现稍微简单，因 jwt 也需依赖数据库；")])])]),t._v(" "),e("li",[e("p",[t._v("如何允许用户只能在最近五个设备登录，如诸多播放器")]),t._v(" "),e("ul",[e("li",[t._v("session：若使用 sql 类数据库，创建 token 数据库表，有id、token、user_id 三字段，user 与 token 表为 1:m 关系；每次认证则添加一行记录，并根据  token 获取 user_id，再根据 user_id 获取该用户有多少设备登录，超过5个，则删除最小 id 行；")]),t._v(" "),e("li",[t._v("jwt：若使用sql类数据库，则可使用计数器，在用户表中添加字段 count，默认值为0，每次认证，count 字段则自增1，每次登录创建的 jwt 的 Payload 中携带数据 current_count 为用户的 count 值；每次请求权限接口时，根据 jwt 获取 count 及 current_count，根据 user_id 查用户表获取 count，并判断与 current_count 差值是否小于5；")]),t._v(" "),e("li",[t._v("注意：此场景下，jwt 实现稍微简单，因使用 session 还需多维护 token 表；")])])]),t._v(" "),e("li",[e("p",[t._v("如何允许用户只能在最近五个设备登录，且让某一用户踢掉除现有设备外的其它所有设备，如诸多播放器")]),t._v(" "),e("ul",[e("li",[t._v("session：在上一个问题的基础上，删掉该设备以外其它所有的 token 记录；")]),t._v(" "),e("li",[t._v("jwt：在上一个问题的基础上，对 count+5，并对该设备重新赋值为新的 count；")])])]),t._v(" "),e("li",[e("p",[t._v("如何显示该用户登录设备列表／如何踢掉特定用户")]),t._v(" "),e("ul",[e("li",[t._v("session：在 token 表中新加列 device；")]),t._v(" "),e("li",[t._v("jwt：需要服务器端保持设备列表信息，做法与session一样，使用 jwt 意义不大；")])])])]),t._v(" "),e("p",[e("strong",[e("u",[e("em",[t._v("JWT 结合 Session：")])])])]),t._v(" "),e("ul",[e("li",[t._v("token 包含 userId，可实现简单的前端错误上报；")]),t._v(" "),e("li",[t._v("token 包含 sessionId，可实现服务端基于 Session 认证")]),t._v(" "),e("li",[t._v("只在 payload 存放关键信息，并采用比 JSON 更为紧凑的格式；")]),t._v(" "),e("li",[t._v("定死全服务器端的签名算法，省略 Header；")]),t._v(" "),e("li",[t._v("关键：服务器端实现 Session 机制；")]),t._v(" "),e("li",[t._v("优化编码格式；")])]),t._v(" "),e("h5",{attrs:{id:"_3-3-3、综述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-3、综述"}},[t._v("#")]),t._v(" 3-3-3、综述")]),t._v(" "),e("p",[e("strong",[e("u",[e("em",[t._v("浓缩版")])])]),t._v("：后端通过随机数加签名生成一个 token，前端拿到 token 后通过拦截器在接口调用时添加 token；")]),t._v(" "),e("p",[e("strong",[e("u",[e("em",[t._v("流程版")])])]),t._v("：")]),t._v(" "),e("ol",[e("li",[t._v("需要一个secret (随机数)")]),t._v(" "),e("li",[t._v("后端利用 secret & 加密算法(如：HMAC-SHA256) 对 payload (如账号密码) 生成一个字符串(token)，返回前端；")]),t._v(" "),e("li",[t._v("前端每次 request 在 header中带上 token；")]),t._v(" "),e("li",[t._v("后端用同样的算法解密；")])]),t._v(" "),e("p",[e("strong",[e("u",[e("em",[t._v("详细版")])])]),t._v("：")]),t._v(" "),e("ul",[e("li",[t._v("后端使用固定秘钥加密用户标识(uid)+创建token时间(ttl) 通过对称加密(收到客户端提交的token需要解开所有使用堆成加密)的加密算法生成一字符串 token；")]),t._v(" "),e("li",[t._v("每次客户端请求都将 token 放到请求头 header中(body参数也可，无所谓在哪)；")]),t._v(" "),e("li",[t._v("服务器端收到该请求并使用相同的秘钥解开 token，查看 token 是否过期，也可通过 token 中的 uid 和其他参数校验用户合法性；\n"),e("ul",[e("li",[t._v("比如：请求参数中也有一个 uid 必填参数，如此就可对比两个 uid 是否相同，若相同则说明是同一个人；")]),t._v(" "),e("li",[t._v("比如：单纯的只验证 token，只需另外的用户拿到无过期 token 就可伪造用户身份进行服务器端 api 的请求；")])])])])])}),[],!1,null,null,null);s.default=a.exports}}]);