(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{593:function(t,a,s){"use strict";s.r(a);var n=s(4),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"一、基本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、基本"}},[t._v("#")]),t._v(" 一、基本")]),t._v(" "),s("h3",{attrs:{id:"_1-1、数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1、数据结构"}},[t._v("#")]),t._v(" 1-1、数据结构")]),t._v(" "),s("h4",{attrs:{id:"_1-1-1、定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1、定义"}},[t._v("#")]),t._v(" 1-1-1、定义")]),t._v(" "),s("p",[t._v("相互间存在一或多种特定关系的数据元素的集合；")]),t._v(" "),s("ul",[s("li",[t._v("数据元素：组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理；一个数据元素可由若干个数据项组成；\n"),s("ul",[s("li",[t._v("比如禽类的数据元素是鸡、鸭、鹅，人类则是人；")])])]),t._v(" "),s("li",[t._v("数据项：数据不可分割的最小单位；\n"),s("ul",[s("li",[t._v("比如人类的数据项是手、脚、身；")])])]),t._v(" "),s("li",[t._v("数据：描述客观事物的符号，是计算机中可操作的对象，能被计算机识别，并输入给计算机处理的符号集合；\n"),s("ul",[s("li",[t._v("注意：数据的子集—数据对象，即性质相同的数据元素集合；")])])])]),t._v(" "),s("h4",{attrs:{id:"_1-1-2、逻辑结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2、逻辑结构"}},[t._v("#")]),t._v(" 1-1-2、逻辑结构")]),t._v(" "),s("p",[t._v("指数据对象中数据元素间的相互关系；")]),t._v(" "),s("ul",[s("li",[t._v("集合结构：数据元素除了同属一个集合外，无任何关系；")]),t._v(" "),s("li",[t._v("线性结构：数据元素间呈一对一关系；")]),t._v(" "),s("li",[t._v("树形结构：数据元素间呈一对多关系；")]),t._v(" "),s("li",[t._v("图形结构：数据元素间呈多对多关系；")])]),t._v(" "),s("h4",{attrs:{id:"_1-1-3、物理结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-3、物理结构"}},[t._v("#")]),t._v(" 1-1-3、物理结构")]),t._v(" "),s("p",[t._v("指数据的逻辑结构再计算机中的存储形式；")]),t._v(" "),s("ul",[s("li",[t._v("顺序存储结构：将数据元素存放在地址连续的存储单元中，而数据间的逻辑关系与物理关系一致；")]),t._v(" "),s("li",[t._v("链式存储结构：将数据元素存放在任意(可连续可不连续)的存储单元中，数据间的逻辑关系与物理关系并不一定一致；")])]),t._v(" "),s("h3",{attrs:{id:"_1-2、算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2、算法"}},[t._v("#")]),t._v(" 1-2、算法")]),t._v(" "),s("h4",{attrs:{id:"_1-2-1、定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1、定义"}},[t._v("#")]),t._v(" 1-2-1、定义")]),t._v(" "),s("p",[t._v("解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，且每条指令表示一或多个操作；")]),t._v(" "),s("h4",{attrs:{id:"_1-2-2、特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2、特性"}},[t._v("#")]),t._v(" 1-2-2、特性")]),t._v(" "),s("ul",[s("li",[t._v("输入输出")]),t._v(" "),s("li",[t._v("有穷性：算法在执行有限步骤后，自动结束而不会出现无限循环，且每个步骤在可接受的时间内完成；")]),t._v(" "),s("li",[t._v("确定性：算法每一步骤具有确定含义，不会出现二义性；")]),t._v(" "),s("li",[t._v("可行性：算法每一步均须可行，均能通过执行有限次数完成；")])]),t._v(" "),s("h4",{attrs:{id:"_1-2-3、设计要求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3、设计要求"}},[t._v("#")]),t._v(" 1-2-3、设计要求")]),t._v(" "),s("ul",[s("li",[t._v("正确性、可读性、健壮性、高效率、低存储")])]),t._v(" "),s("h4",{attrs:{id:"_1-2-4、效率度量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-4、效率度量"}},[t._v("#")]),t._v(" 1-2-4、效率度量")]),t._v(" "),s("ul",[s("li",[t._v("事后统计方法、事前分析估算")])]),t._v(" "),s("h4",{attrs:{id:"_1-2-5、复杂度与分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-5、复杂度与分析"}},[t._v("#")]),t._v(" 1-2-5、复杂度与分析")]),t._v(" "),s("h5",{attrs:{id:"_1-2-5-1、定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-5-1、定义"}},[t._v("#")]),t._v(" 1-2-5-1、定义")]),t._v(" "),s("p",[t._v("​\t数据结构和算法解决是“如何让计算机更快时间、更省空间的解决问题”。因此需从执行时间和占用空间两个维度，来评估数据结构和算法性能。分别用时间复杂度和空间复杂度两个概念来描述性能问题，二者统称为复杂度。"),s("strong",[t._v("复杂度描述的是算法执行时间(或占用空间)与数据规模的增长关系")]),t._v("；")]),t._v(" "),s("h5",{attrs:{id:"_1-2-5-2、意义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-5-2、意义"}},[t._v("#")]),t._v(" 1-2-5-2、意义")]),t._v(" "),s("p",[t._v("​\t与性能测试相比，复杂度分析有不依赖执行环境、成本低、效率高、易操作、指导性强的特点；且掌握复杂度分析，将能编写出性能更优的代码，有利于降低系统开发和维护成本；")]),t._v(" "),s("h5",{attrs:{id:"_1-2-5-3、分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-5-3、分析"}},[t._v("#")]),t._v(" 1-2-5-3、分析")]),t._v(" "),s("p",[t._v("**"),s("u",[s("em",[t._v("大O表示法：描述的是算法的运行时间和输入数据之间的关系；")])]),t._v("**或描述一个算法或操作的渐进时间复杂度，即此算法和操作消耗的时间与输入数据规模的关系，描述 n 趋于无穷的时间复杂度；通常 O(x) 指渐进时间复杂度，描述当 n 趋近于无穷时不同算法的性能(忽略低阶项和常数)，比如 O(1) 表示算法或操作消耗时间与输入规模无关；来源：算法的执行时间与每行代码的执行次数成正比，用 "),s("code",[t._v("T(n) = O(f(n))")]),t._v(" 表示，其中 T(n) 表示算法执行总时间，f(n) 表示每行代码执行总次数，而 n 往往表示数据的规模；")]),t._v(" "),s("p",[t._v("特点：以时间复杂度为例，由于时间复杂度描述的是算法执行时间与数据规模的增长变化趋势，所以常量阶、低阶以及系数实际上对这种增长趋势不产决定性影响，故在做时间复杂度分析时忽略这些项；种类如下：")]),t._v(" "),s("ul",[s("li",[s("strong",[s("u",[t._v("多项式阶")])]),t._v("：随数据规模的增长，算法的执行时间和空间占用，按照多项式的比例增长；包括：O(1)(常数阶-Constant)、O(logn)(对数阶-Logarithmic)、O(n)(线性阶-Linear)、O(nlogn)(线性对数阶-LinearLog)、O(n^2)(平方阶-Square)、O(n^3)(立方阶)")]),t._v(" "),s("li",[s("strong",[s("u",[t._v("非多项式阶")])]),t._v("：随数据规模的增长，算法执行时间与空间占用增加，此类算法性能极差；包括：O(2^n)(指数阶-Exponential Growth)、O(n!)、阶乘阶-Factorial\n"),s("ul",[s("li",[s("img",{staticStyle:{zoom:"50%"},attrs:{src:"/Image/Algorithm/Algorithm/1.png",align:""}})])])])]),t._v(" "),s("p",[s("strong",[s("u",[s("em",[t._v("复杂度分析法则")])])])]),t._v(" "),s("ul",[s("li",[t._v("单段代码看高频：比如循环；")]),t._v(" "),s("li",[t._v("多段代码取最大：比如一段代码中有单循环和多重循环，那么取多重循环的复杂度；")]),t._v(" "),s("li",[t._v("嵌套代码求乘积：比如递归、多重循环等；")]),t._v(" "),s("li",[t._v("多个规模求加法：比如方法有两个参数控制两个循环的次数，那么这时就取二者复杂度相加；")])]),t._v(" "),s("p",[s("strong",[s("u",[s("em",[t._v("时间复杂度")])])]),t._v("：反映程序运行从开始到结束所需时间；将算法中基本操作重复执行的次数(频度)作为算法的时间复杂度；常见常见时间复杂度如下：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Ex1:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 时间复杂度为 O(n²): 总执行次数 T(n) = 1 + 1 + (n+1) + n + n + n + n*(n+1) + n*n + n*n = 3n^2 + 5n + 3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 取 n 趋于无穷大，常数、常数系数忽略不计，只保留次数最高那一项，结果为 n²")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("traverse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" outLen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 n+1 n")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("outLen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" inLen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// n  n*(n+1)  n*n")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("inLen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n            console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Ex2:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 时间复杂度为 O(logn)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length  \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[s("u",[s("em",[t._v("空间复杂度")])])]),t._v("：指对一算法在运行过程中临时占用存储空间大小的量度；据此可对程序运行所需内存多少有预先估计；")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("常见的空间复杂度有 "),s("code",[t._v("O(1)")]),t._v("、"),s("code",[t._v("O(n)")]),t._v(" 和 "),s("code",[t._v("O(n^2)")]),t._v("；")])]),t._v(" "),s("li",[s("p",[t._v("注意：与时间复杂度相似，但其描述的是内存增长的**"),s("u",[t._v("趋势")]),t._v("**。")])]),t._v(" "),s("li",[s("p",[t._v("注意：程序执行时，除需要存储本身所用指令、常数、变量和输入数据的空间，还需对数据进行操作的工作单元和存储一些为现实计算所需信息的辅助空间；")])])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 示例1:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 占用空间的有以下变量：arr、len、i，而后面尽管有很多次循环，但是这些都是时间上的开销。循环体在执行时，并没有开辟新的内存空间。因此整个函数对内存的占用量是恒定的，其对应的空间复杂度就是 O(1)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("traverse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Ex2:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 占用空间的有以下变量：arr、n、i，此处的 arr，并非一成不变，其最终大小是由输入的 n 决定，即会随着 n 的增大而增大，此方法的空间复杂度就是 O(n)。而类似的，若初始化规模为 n*n 的数组，则其空间复杂度就是 O(n^2)；")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" arr\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h5",{attrs:{id:"_1-2-5-4、分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-5-4、分类"}},[t._v("#")]),t._v(" 1-2-5-4、分类")]),t._v(" "),s("p",[t._v("分类是因为同一段代码在不同情况下，时间复杂度会出现量级差异，为更全面和准确描述代码的时间复杂度，引入以下4个概念：")]),t._v(" "),s("ul",[s("li",[t._v("最坏情况时间复杂度：代码在最理想情况下执行的时间复杂度；")]),t._v(" "),s("li",[t._v("最好情况时间复杂度：代码在最坏情况下执行的时间复杂度；")]),t._v(" "),s("li",[t._v("平均时间复杂度：用代码在所有情况下执行的次数的加权平均值表示；")]),t._v(" "),s("li",[t._v("均摊时间复杂度：在代码执行的所有复杂度情况中，若绝大部分是低级别的复杂度，且个别情况是高级别复杂度且发生具有时序关系时，则可将个别高级别复杂度均摊到低级别复杂度上，此时的均摊结果就等于低级别复杂度；比如：动态数组中，resize 时数组的添加操作复杂度为 O(n)，但由于 addLast 的复杂度为 O(1)，且并非每次 addLast 操作都会触发 resize，则需对复杂度进行均摊，结果为 O(1)；")]),t._v(" "),s("li",[t._v("注意：代码复杂度在不同情况下出现量级差别时，才需要区别这4种复杂度，大多数情况下是无需区别分析)；")])]),t._v(" "),s("h2",{attrs:{id:"x、题集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#x、题集"}},[t._v("#")]),t._v(" X、题集")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("顺序")]),t._v(" "),s("th",[t._v("题目")]),t._v(" "),s("th",[t._v("类型")]),t._v(" "),s("th",[t._v("解题")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("0001")]),t._v(" "),s("td",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/two-sum/",target:"_blank",rel:"noopener noreferrer"}},[t._v("TwoSum"),s("OutboundLink")],1)]),t._v(" "),s("td",[t._v("Array、HashMap")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("0015")]),t._v(" "),s("td",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/3sum/",target:"_blank",rel:"noopener noreferrer"}},[t._v("3Sum"),s("OutboundLink")],1)]),t._v(" "),s("td",[t._v("Array、HashMap、双向指针")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("0017")]),t._v(" "),s("td",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Letter Combinations of a Phone Number"),s("OutboundLink")],1)]),t._v(" "),s("td",[t._v("Array")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("0018")]),t._v(" "),s("td",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/4sum/",target:"_blank",rel:"noopener noreferrer"}},[t._v("4Sum"),s("OutboundLink")],1)]),t._v(" "),s("td",[t._v("Array、HashMap、双向指针")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("0035")]),t._v(" "),s("td",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/search-insert-position/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Search Insert Position"),s("OutboundLink")],1)]),t._v(" "),s("td",[t._v("Array")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("0724")]),t._v(" "),s("td",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/find-pivot-index/",target:"_blank",rel:"noopener noreferrer"}},[t._v("find-pivot-index"),s("OutboundLink")],1)]),t._v(" "),s("td",[t._v("Array、HashMap")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("剑指Offer-0021")]),t._v(" "),s("td",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/",target:"_blank",rel:"noopener noreferrer"}},[t._v("调整数组顺序使奇数位于偶数前面 LCOF"),s("OutboundLink")],1)]),t._v(" "),s("td",[t._v("Array、双向指针")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("剑指Offer-0029")]),t._v(" "),s("td",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/",target:"_blank",rel:"noopener noreferrer"}},[t._v("顺时针打印矩阵"),s("OutboundLink")],1)]),t._v(" "),s("td",[t._v("Array、多维数组")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("剑指Offer-0057")]),t._v(" "),s("td",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/he-wei-sde-liang-ge-shu-zi-lcof/",target:"_blank",rel:"noopener noreferrer"}},[t._v("和为s的两个数字"),s("OutboundLink")],1)]),t._v(" "),s("td",[t._v("Array、双向指针")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("剑指Offer-0057Ⅱ")]),t._v(" "),s("td",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/",target:"_blank",rel:"noopener noreferrer"}},[t._v("II. 和为s的连续正数序列"),s("OutboundLink")],1)]),t._v(" "),s("td",[t._v("Queue、双向指针")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("剑指Offer-0066")]),t._v(" "),s("td",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/gou-jian-cheng-ji-shu-zu-lcof/",target:"_blank",rel:"noopener noreferrer"}},[t._v("构建乘积数组"),s("OutboundLink")],1)]),t._v(" "),s("td",[t._v("Array、多维数组")]),t._v(" "),s("td")])])]),t._v(" "),s("ul",[s("li",[t._v("Array-数组")]),t._v(" "),s("li",[t._v("List-链表\n"),s("ul",[s("li",[t._v("双向链表")]),t._v(" "),s("li",[t._v("循环链表")])])]),t._v(" "),s("li",[t._v("Queue-队列\n"),s("ul",[s("li",[t._v("双向队列")]),t._v(" "),s("li",[t._v("循环队列")]),t._v(" "),s("li",[t._v("优先队列")])])]),t._v(" "),s("li",[t._v("Stack-栈")]),t._v(" "),s("li",[t._v("堆")]),t._v(" "),s("li",[t._v("Tree-树\n"),s("ul",[s("li",[t._v("二分查找")]),t._v(" "),s("li",[t._v("AVL 树")]),t._v(" "),s("li",[t._v("红黑树")]),t._v(" "),s("li",[t._v("后缀树")]),t._v(" "),s("li",[t._v("线段树 或 间隔树")]),t._v(" "),s("li",[t._v("二叉索引树")])])]),t._v(" "),s("li",[t._v("图 (有向图与无向图)")]),t._v(" "),s("li",[t._v("字典树")]),t._v(" "),s("li",[t._v("HashMap-哈希表")]),t._v(" "),s("li",[t._v("并查集")])]),t._v(" "),s("p",[t._v("一、基本")]),t._v(" "),s("p",[t._v("1-1、定义")]),t._v(" "),s("p",[t._v("1-2、特点")]),t._v(" "),s("p",[t._v("1-2-1、时间复杂度")]),t._v(" "),s("p",[t._v("1-2-2、抽象数据类型")]),t._v(" "),s("p",[t._v("1-2-2、应用")]),t._v(" "),s("p",[t._v("1-2-3、场景")]),t._v(" "),s("p",[t._v("1-3、Java实现")]),t._v(" "),s("p",[t._v("1-4、Js实现")]),t._v(" "),s("p",[t._v("二、LeedCode")]),t._v(" "),s("p",[t._v("时间复杂度+递归")]),t._v(" "),s("p",[s("strong",[t._v("线性表")]),t._v("(List)：零或多个数据元素的"),s("em",[t._v("有限")]),t._v(" "),s("em",[t._v("序列")]),t._v("；线性表元素的个数 n (n≥0) 定义为线性表的长度，当 n =  0  时，称为空表。每个线性表上的数据最多只有前和后两个方向；链表、队列、栈等也是线性表结构，与之相对的是非线性表，数据之间并不是简单的前后关系，比如二叉树、堆、图等；")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"/Image/Algorithm/Array/1.png",align:""}}),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"/Image/Algorithm/Array/2.png",align:""}}),t._v(" "),s("p",[s("strong",[t._v("线性表的顺序存储结构")]),t._v("：指的是用一段地址连续的存储单元依次存储线性表的数据元素；")]),t._v(" "),s("p",[t._v("​\t一般用一维数组实现顺序存储结构；注意：数组长度不等同线性表长度，前者是指存放线性表的存储空间的长度(分配后即值固定)，后者是指线性表中数组元素的个数(值变化)；任意时刻，线性表长度应小于等于数组长度；")]),t._v(" "),s("ul",[s("li",[t._v("描述顺序存储结构的三个属性：\n"),s("ul",[s("li",[t._v("存储空间的起始位置；")]),t._v(" "),s("li",[t._v("线性表的最大存储容量；")]),t._v(" "),s("li",[t._v("线性表的当前长度；")])])]),t._v(" "),s("li",[t._v("优点：\n"),s("ul",[s("li",[t._v("无须为表示表中元素之间的逻辑关系而增加额外的存储空间")]),t._v(" "),s("li",[t._v("可快速存取表中任一位置的元素；")])])]),t._v(" "),s("li",[t._v("缺点：\n"),s("ul",[s("li",[t._v("插入与删除操作须移动大量元素；")]),t._v(" "),s("li",[t._v("当线性表长度变化较大时，难以确定存储空间容量；")]),t._v(" "),s("li",[t._v("容易造成存储空间的碎片化；")])])])]),t._v(" "),s("p",[s("strong",[t._v("线性表的链式存储结构")]),t._v("：指的是用一组任意的存储单元存储线性表的数据元素，这组存储单元可连续亦可不连续；")]),t._v(" "),s("p",[t._v("​\t线性表的链式存储结构，即链表由一或多个结点链结组成，结点由数据域和指针域组成，前者是存储数据元素信息的域，后者是存储直接后继位置的域，指针域中存储的信息被称为指针或链；若链表每个结点只包含一个指针域，则称单链表；")]),t._v(" "),s("ul",[s("li",[t._v("头结点：为方便对链表进行操作，在单链表的首个结点前附设的结点，其数据域一般无意义(亦可用于存放链表长度)；\n"),s("ul",[s("li",[t._v("注意：若线性表为空，则头结点的指针域为空，表示空链表；")]),t._v(" "),s("li",[t._v("注意：有了头结点，对链表首个元素进行前插入和删除操作就与其他节点相统一，但头结点非链表必须元素；")])])]),t._v(" "),s("li",[t._v("头指针：链表的首个结点的存储位置，头指针在头结点内；\n"),s("ul",[s("li",[t._v("注意：无论链表是否为空，头指针均不为空，头指针是链表的必须元素；")])])])]),t._v(" "),s("p",[s("strong",[t._v("顺序与链式优缺点：")])]),t._v(" "),s("ul",[s("li",[t._v("存储分配方式\n"),s("ul",[s("li",[t._v("顺序存储结构用一段连续的存储单元依次存储线性表的数据元素；")]),t._v(" "),s("li",[t._v("单链表采用链式存储结构，用一组任意的存储单元存放线性表的元素；")])])]),t._v(" "),s("li",[t._v("时间性能\n"),s("ul",[s("li",[t._v("查找\n"),s("ul",[s("li",[t._v("顺序存储结构0(1)；")]),t._v(" "),s("li",[t._v("单链表O(n)；")])])]),t._v(" "),s("li",[t._v("插入和删除\n"),s("ul",[s("li",[t._v("顺序存储结构需要平均移动表长一半的元素，时间为O(n)；")]),t._v(" "),s("li",[t._v("单链表在线出某位置的指针后，插入和删除时间仅为0(1)；")])])])])]),t._v(" "),s("li",[t._v("空间性能\n"),s("ul",[s("li",[t._v("顺序存储结构需要预分配存储空间，分大了浪费，分小了易发生上溢；")]),t._v(" "),s("li",[t._v("单链表不需要分配存储空间，只要有就可以分配，元素个数也不受限制")])])])]),t._v(" "),s("p",[s("strong",[t._v("顺序与链式应用场景：")])]),t._v(" "),s("ul",[s("li",[t._v("若线性表需要频繁查找，很少进行插入和删除操作时，宜采用顺序存储结构；若需要频繁插入和删除时，宜采用单链表结构；")]),t._v(" "),s("li",[t._v("当线性表中的元素个数变化较大或者根本不知道有多太时，宜用单链表结构，如此无需考虑存储空间的大小问题。而若事先知道线性表的大致长度，则使用顺序存储结构效率会高很多；")])])])}),[],!1,null,null,null);a.default=r.exports}}]);