(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{533:function(t,s,e){"use strict";e.r(s);var a=e(4),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"四、架构模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、架构模式"}},[t._v("#")]),t._v(" 四、架构模式")]),t._v(" "),e("h2",{attrs:{id:"_4-1、基本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1、基本"}},[t._v("#")]),t._v(" 4-1、基本")]),t._v(" "),e("p",[t._v("软件架构模式—"),e("strong",[e("u",[e("em",[t._v("Architectural Pattern")])])]),t._v("：MVC，MVP，MVVM，均是常见的软件架构模式(Architectural Pattern)；")]),t._v(" "),e("p",[t._v("软件架构模式通过分离关注点，来改进代码的组织方式，且相对独立不影响；")]),t._v(" "),e("ul",[e("li",[t._v("相同部分："),e("strong",[e("u",[e("em",[t._v("MV(Model-View)")])])])]),t._v(" "),e("li",[t._v("不同部分："),e("strong",[e("u",[e("em",[t._v("C(Controller)、P(Presenter)、VM(View-Model)")])])])])]),t._v(" "),e("p",[t._v("架构模式不同于设计模式 (Design Pattern)")]),t._v(" "),e("ul",[e("li",[t._v("前者往往使用了多种设计模式；")]),t._v(" "),e("li",[t._v("后者只是为了解决一类问题而总结出的抽象方法；")])]),t._v(" "),e("h2",{attrs:{id:"_4-2、m-v-c"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2、m-v-c"}},[t._v("#")]),t._v(" 4-2、M& V & C")]),t._v(" "),e("h3",{attrs:{id:"_4-2-1、model"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1、model"}},[t._v("#")]),t._v(" 4-2-1、Model")]),t._v(" "),e("p",[t._v("应用程序中用于，处理应用程序数据逻辑的部分；")]),t._v(" "),e("p",[t._v("用于封装和应用程序的业务逻辑相关的数据以及对数据的处理方法；")]),t._v(" "),e("p",[t._v("通常 Model 负责在数据库中存取数据；")]),t._v(" "),e("h3",{attrs:{id:"_4-2-2、view"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2、view"}},[t._v("#")]),t._v(" 4-2-2、View")]),t._v(" "),e("p",[t._v("应用程序中，处理数据显示的部分；")]),t._v(" "),e("p",[t._v("通常 View 依据模型数据创建；")]),t._v(" "),e("h3",{attrs:{id:"_4-2-3、controller"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-3、controller"}},[t._v("#")]),t._v(" 4-2-3、Controller")]),t._v(" "),e("p",[t._v("应用程序中，处理用户交互的部分；")]),t._v(" "),e("p",[t._v("用于连接 Model & View，控制应用程序流程，定义用户界面对用户输入响应方式，处理用户行为和数据上的改变；")]),t._v(" "),e("p",[t._v("通常 Controller 负责从 View 读取数据，控制用户输入，并向 Model 发送数据，是一个中间件；")]),t._v(" "),e("h2",{attrs:{id:"_4-3、mv-c-p-vm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3、mv-c-p-vm"}},[t._v("#")]),t._v(" 4-3、MV(C/P/VM)")]),t._v(" "),e("p",[t._v("分别用三种模式实现一个可以对数值进行加减操作的组件：")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091220.png",align:""}}),t._v(" "),e("h3",{attrs:{id:"_4-3-1、mvc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1、mvc"}},[t._v("#")]),t._v(" 4-3-1、MVC")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091221.png",align:""}}),t._v(" "),e("p",[t._v("基本：View 负责接收用户的输入操作，Controller 负责业务逻辑的处理，Model 负责数据持久化(数据管理)，Controller 将结果反馈给 View")]),t._v(" "),e("p",[t._v("优点：")]),t._v(" "),e("ul",[e("li",[t._v("简化分组开发，实现同时开发；")]),t._v(" "),e("li",[t._v("利于管理，让开发人员更专注于开发；")]),t._v(" "),e("li",[t._v("职责明确，独立改变而不影响，较高的灵活性和重用性；")])]),t._v(" "),e("p",[t._v("缺点：")]),t._v(" "),e("ul",[e("li",[t._v("Controller 集中了过多业务逻辑；")]),t._v(" "),e("li",[t._v("View 与 Controller 间耦合重，难以复用；")]),t._v(" "),e("li",[t._v("当每个事件都流经 Controller 时，Controller 变得臃肿；")])]),t._v(" "),e("p",[t._v("应用：JavaEE 中的 SSH框架(Struts/Spring/Hibernate)、Struts(View, STL)、Spring(Controller, Ioc、Spring MVC)、Hibernate(Model, ORM)")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("MVC 的 Model")]),t._v(" "),e("ul",[e("li",[t._v("用于存储业务数据，数据发生变化，Model 将通知 View；")]),t._v(" "),e("li",[t._v("Model 和 View 间使用了观察者模式，View 事先在 Model 上注册从而观察 Model，当 Model 上数据发生改变时 View 则及时刷新(Controller)；")]),t._v(" "),e("li",[e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091222.png",align:""}})])])]),t._v(" "),e("li",[e("p",[t._v("MVC 的 View")]),t._v(" "),e("ul",[e("li",[t._v("Controller 和 View 间使用了策略模式，View 引入 Controller 的实例 来实现特定的响应策略，如其中的按钮的 click 事件：")]),t._v(" "),e("li",[e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091223.png",align:""}})])])]),t._v(" "),e("li",[e("p",[t._v("MVC 的 Controller")]),t._v(" "),e("ul",[e("li",[t._v("Controller 是 Model 和 View 间的纽带，MVC 将响应机制封装在 controller 对象中")]),t._v(" "),e("li",[t._v("在 Controller 中响应 View 的事件并调用 Model 的接口对数据进行操作，一旦 Model 发生变化便通知 View 进行更新；")]),t._v(" "),e("li",[e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091224.png",align:""}})])])])]),t._v(" "),e("p",[t._v("此处实例化 View 并向对应的 Model 实例注册，当 Model 发生变化时就去通知 View 做更新，这里用到了观察者模式；")]),t._v(" "),e("p",[t._v("最后一步，使用 Controller 初始化：")]),t._v(" "),e("ul",[e("li",[e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091225.png",align:""}})])]),t._v(" "),e("h3",{attrs:{id:"_4-3-2、mvp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-2、mvp"}},[t._v("#")]),t._v(" 4-3-2、MVP")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091226.png",align:""}}),t._v(" "),e("p",[t._v("基本：MVP 是 MVC 模式的改良，其将 MVC 中的 Controller 换为 Presenter-呈现，同样负责业务逻辑；即 View 负责控件组成的页面，Model 负责实体数据库操作；而 View 和 Model 间的控件数据绑定操作则属于 Presenter，目的时隔绝 View 和 Model 间的通信，View 不再像 MVC 那样直接访问 Model，而此任务交由 Presenter 负责；")]),t._v(" "),e("p",[t._v("优点：")]),t._v(" "),e("ul",[e("li",[t._v("与 MVC 相比，解决了无法实现多个 View 共用一个 Controller的问题，降低 View 和 Controller 耦合度，可复用性提高")]),t._v(" "),e("li",[t._v("与 MVC 相比，MVP模式通过解耦 View 和 Model ，使职责划分更加清晰")]),t._v(" "),e("li",[t._v("隔绝 View 和 Model，可将 View 抽离封装成组件(往后只需提供接口提供给上层操作即可)")])]),t._v(" "),e("p",[t._v("缺点：")]),t._v(" "),e("ul",[e("li",[t._v("Presenter 还是很重，维护困难；")]),t._v(" "),e("li",[t._v("Presenter 负责基本业务逻辑，还需管理 View 与 Model 间的数据流动；")]),t._v(" "),e("li",[t._v("由于没有数据绑定，若 View 需求增多，Presenter 也要改变")])]),t._v(" "),e("p",[t._v("应用："),e("a",{attrs:{href:"http://asp.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ASP.NET"),e("OutboundLink")],1),t._v(" 的 webform、winform 基于事件驱动的开发技术就是使用的 MVP 模式")]),t._v(" "),e("p",[t._v("注意：React 是 View 层的框架，Model 层的框架需要结合 Flux 或 Redux ；")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("MVP 的 Model")]),t._v(" "),e("ul",[e("li",[t._v("同 MVC，依然用于封装业务相关的数据和对应处理数据的方法")]),t._v(" "),e("li",[e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091227.png",align:""}})])])]),t._v(" "),e("li",[e("p",[t._v("MVP 的 View")]),t._v(" "),e("ul",[e("li",[t._v("用户对 View 的操作都转移到了Presenter")]),t._v(" "),e("li",[t._v("待 Presenter 通知 Model 更新后，Presenter 调用 View 提供的接口更新视图(下 this)；")]),t._v(" "),e("li",[e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091228.png",align:""}})])])]),t._v(" "),e("li",[e("p",[t._v("MVP 的 Presenter")]),t._v(" "),e("ul",[e("li",[t._v("负责基本的业务逻辑，并管理 从 View 与 View 间的数据流动；")]),t._v(" "),e("li",[e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091229.png",align:""}})])])])]),t._v(" "),e("p",[t._v("最后一步，使用 View 初始化：(MVC 用的是 Controller 实例化)")]),t._v(" "),e("ul",[e("li",[e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091230.png",align:""}})])]),t._v(" "),e("h3",{attrs:{id:"_4-3-3、mvvm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-3、mvvm"}},[t._v("#")]),t._v(" 4-3-3、MVVM")]),t._v(" "),e("p",[t._v("基本：MVP 是对 MVC 的改良，MVVM 则是变革，MVVM 将数据模型的，数据双向绑定的思想作为核心；MVVM 将 View 和 Model 的同步逻辑自动化，之间的同步不再需手动操作，而是交由框架提供的数据绑定功能来负责处理；即只需告诉框架 V层 显示的数据，对应 M层哪一部分即可；至此，V层 数据的变化会同时修改 M层的数据源，而 M层的数据变化也会立即反应到 V层上；")]),t._v(" "),e("p",[t._v("注意：ViewModel 是整个模式的重点，业务逻辑也主要集中在这里，其中的一大核心就是数据绑定；")]),t._v(" "),e("p",[t._v("优点：")]),t._v(" "),e("ul",[e("li",[t._v("与 MVC/P 相比，简化业务与界面的依赖，解决数据频繁更新的问题；")]),t._v(" "),e("li",[t._v("与 MVC/P 相比，V 层 和 M 层分离，低耦合，提高可复用性；")]),t._v(" "),e("li",[t._v("与 MVC/P 相比，MVVM 中的 View 通过使用模板语法来声明式的将数据渲染进 DOM；")]),t._v(" "),e("li",[t._v("VM 对Model 进行更新时，会通过数据绑定，更新到 View")])]),t._v(" "),e("p",[t._v("应用：.NET的 WPF、JS 的 Knockout、AngularJS、Angular 框架；")]),t._v(" "),e("ul",[e("li",[t._v("MVVM 的 Model\n"),e("ul",[e("li",[t._v("在 MVVM 中，可将 Model 称为数据层，仅关注数据本身，不关心任何行为；")]),t._v(" "),e("li",[e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091231.png",align:""}})])])]),t._v(" "),e("li",[t._v("MVVM 的 View\n"),e("ul",[e("li",[t._v("与 MVC/MVP 不同的是，MVVM 中的 View 通过使用模板语法来声明式的将数据渲染进 DOM")]),t._v(" "),e("li",[t._v("VM 对 Model 进行更新时，会通过数据绑定，更新到 View；")]),t._v(" "),e("li",[e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091232.png",align:""}})])])]),t._v(" "),e("li",[t._v("MVVM 的 ViewModel\n"),e("ul",[e("li",[t._v("与 MVP 不同的是，没有了 View 为 Presente 提供的接口；")]),t._v(" "),e("li",[t._v("之前由 Presenter 负责的 View 和 Model 间的数据同步交给了 ViewModel 中的数据绑定进行处理；")]),t._v(" "),e("li",[t._v("Model 和 ViewModel 任一一个发生变化，就会自动更新对方；")]),t._v(" "),e("li",[e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091233.png",align:""}})])])])]),t._v(" "),e("p",[t._v("补充A：")]),t._v(" "),e("p",[e("strong",[t._v("Model")]),t._v(": 代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑。我们可以把Model称为数据层，因为它仅仅关注数据本身，不关心任何行为")]),t._v(" "),e("p",[e("strong",[t._v("View")]),t._v(": 用户操作界面。当ViewModel对Model进行更新的时候，会通过数据绑定更新到View")]),t._v(" "),e("p",[e("strong",[t._v("ViewModel")]),t._v("： 业务逻辑层，View需要什么数据，ViewModel要提供这个数据；View有某些操作，ViewModel就要响应这些操作，所以可以说是Model for View.")]),t._v(" "),e("p",[e("strong",[t._v("总结")]),t._v("： MVVM 模式简化了界面与业务的依赖，解决了数据频繁更新；在使用当中，利用双向绑定技术，使得 Model 变化时，ViewModel 会自动更新，而 ViewModel 变化时，View 也会自动变化；")]),t._v(" "),e("p",[t._v("补充B：")]),t._v(" "),e("p",[t._v("ViewModel 是由前端开发人员组织生成和维护的视图数据层。在这一层，前端开发者对从后端获取的 Model 数据进行转换处理，做二次封装，以生成符合 View 层使用预期的视图数据模型。需要注意的是 ViewModel 所封装出来的数据模型包括视图的状态和行为两部分，而 Model 层的数据模型是只包含状态的，比如页面的这一块展示什么，而页面加载进来时发生什么，点击这一块发生什么，这一块滚动时发生什么这些都属于视图行为（交互），视图状态和行为都封装在了 ViewModel 里。这样的封装使得 ViewModel 可以完整地去描述 View 层。")]),t._v(" "),e("p",[t._v("MVVM 框架实现了双向绑定，这样 ViewModel 的内容会实时展现在 View 层，前端开发者再也不必低效又麻烦地通过操纵 DOM 去更新视图，MVVM 框架已经把最脏最累的一块做好了，我们开发者只需要处理和维护 ViewModel，更新数据视图就会自动得到相应更新。这样 View 层展现的不是 Model 层的数据，而是 ViewModel 的数据，由 ViewModel 负责与 Model 层交互，这就完全解耦了 View 层和 Model 层，这个解耦是至关重要的，它是前后端分离方案实施的重要一环")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// View 层")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"app"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("p"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("message"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("p"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("button v"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("on"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("click"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"showMessage()"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("Click me"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("button"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ViewModel 层")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" app "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vue")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    el"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#app'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    data"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用于描述视图状态   ")]),t._v("\n        message"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello Vue!'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    methods"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用于描述视图行为  ")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("showMessage")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" vm "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("created")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" vm "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Ajax 获取 Model 层的数据")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ajax")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            url"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/your/server/data/api'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("success")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                vm"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Model 层")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"url"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/your/server/data/api"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"res"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"success"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"IoveC"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"domain"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"www.cnblogs.com"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"_4-4、使用例子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-4、使用例子"}},[t._v("#")]),t._v(" 4-4、使用例子")]),t._v(" "),e("h3",{attrs:{id:"_4-4-1、vue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-1、vue"}},[t._v("#")]),t._v(" 4-4-1、Vue")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091234.png",align:""}})])}),[],!1,null,null,null);s.default=n.exports}}]);