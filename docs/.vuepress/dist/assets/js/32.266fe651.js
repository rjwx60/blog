(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{617:function(e,t,r){"use strict";r.r(t);var a=r(4),u=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h4",{attrs:{id:"_622-design-circular-queue"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_622-design-circular-queue"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/design-circular-queue/",target:"_blank",rel:"noopener noreferrer"}},[e._v("622. Design Circular Queue"),r("OutboundLink")],1)]),e._v(" "),r("h3",{attrs:{id:"一、content"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、content"}},[e._v("#")]),e._v(" 一、Content")]),e._v(" "),r("p",[e._v('Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called "Ring Buffer".')]),e._v(" "),r("p",[e._v("One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.")]),e._v(" "),r("p",[e._v("Your implementation should support following operations:")]),e._v(" "),r("p",[e._v("MyCircularQueue(k): Constructor, set the size of the queue to be k.\nFront: Get the front item from the queue. If the queue is empty, return -1.\nRear: Get the last item from the queue. If the queue is empty, return -1.\nenQueue(value): Insert an element into the circular queue. Return true if the operation is successful.\ndeQueue(): Delete an element from the circular queue. Return true if the operation is successful.\nisEmpty(): Checks whether the circular queue is empty or not.\nisFull(): Checks whether the circular queue is full or not.")]),e._v(" "),r("p",[e._v("设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为“环形缓冲器”。")]),e._v(" "),r("p",[e._v("循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。")]),e._v(" "),r("p",[e._v("你的实现应该支持如下操作：")]),e._v(" "),r("p",[e._v("MyCircularQueue(k): 构造器，设置队列长度为 k 。\nFront: 从队首获取元素。如果队列为空，返回 -1 。\nRear: 获取队尾元素。如果队列为空，返回 -1 。\nenQueue(value): 向循环队列插入一个元素。如果成功插入则返回真。\ndeQueue(): 从循环队列中删除一个元素。如果成功删除则返回真。\nisEmpty(): 检查循环队列是否为空。\nisFull(): 检查循环队列是否已满。")]),e._v(" "),r("h4",{attrs:{id:"_1-1、example"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1、example"}},[e._v("#")]),e._v(" 1-1、Example")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("MyCircularQueue circularQueue = new MyCircularQueue(3); // set the size to be 3\ncircularQueue.enQueue(1);  // return true\ncircularQueue.enQueue(2);  // return true\ncircularQueue.enQueue(3);  // return true\ncircularQueue.enQueue(4);  // return false, the queue is full\ncircularQueue.Rear();  // return 3\ncircularQueue.isFull();  // return true\ncircularQueue.deQueue();  // return true\ncircularQueue.enQueue(4);  // return true\ncircularQueue.Rear();  // return 4\n")])])]),r("h4",{attrs:{id:"_1-2、note"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2、note"}},[e._v("#")]),e._v(" 1-2、Note")]),e._v(" "),r("p",[e._v("All values will be in the range of [0, 1000].\nThe number of operations will be in the range of [1, 1000].\nPlease do not use the built-in Queue library.")]),e._v(" "),r("h4",{attrs:{id:"_1-3、tag"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-3、tag"}},[e._v("#")]),e._v(" 1-3、Tag")]),e._v(" "),r("p",[e._v("Queue")]),e._v(" "),r("h3",{attrs:{id:"二、思路与解答"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、思路与解答"}},[e._v("#")]),e._v(" 二、思路与解答")]),e._v(" "),r("h4",{attrs:{id:"_2-1、思路"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-1、思路"}},[e._v("#")]),e._v(" 2-1、思路")]),e._v(" "),r("h4",{attrs:{id:"_2-2、题解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-2、题解"}},[e._v("#")]),e._v(" 2-2、题解")]),e._v(" "),r("h5",{attrs:{id:"_2-2-1、官解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1、官解"}},[e._v("#")]),e._v(" 2-2-1、官解")]),e._v(" "),r("h5",{attrs:{id:"_2-2-2、自实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2、自实现"}},[e._v("#")]),e._v(" 2-2-2、自实现")]),e._v(" "),r("h5",{attrs:{id:"_2-2-3、综合实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3、综合实现"}},[e._v("#")]),e._v(" 2-2-3、综合实现")]),e._v(" "),r("h3",{attrs:{id:"三、top"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、top"}},[e._v("#")]),e._v(" 三、Top")]),e._v(" "),r("h4",{attrs:{id:"_3-1、ms"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-1、ms"}},[e._v("#")]),e._v(" 3-1、ms")]),e._v(" "),r("h4",{attrs:{id:"_3-2、ms"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-2、ms"}},[e._v("#")]),e._v(" 3-2、ms")]),e._v(" "),r("h3",{attrs:{id:"四、拓展"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#四、拓展"}},[e._v("#")]),e._v(" 四、拓展")]),e._v(" "),r("h4",{attrs:{id:"_4-1、xxx"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-1、xxx"}},[e._v("#")]),e._v(" 4-1、xxx")]),e._v(" "),r("h4",{attrs:{id:"_4-2、xxx"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-2、xxx"}},[e._v("#")]),e._v(" 4-2、xxx")])])}),[],!1,null,null,null);t.default=u.exports}}]);