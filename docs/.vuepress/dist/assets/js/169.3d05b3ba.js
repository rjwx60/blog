(window.webpackJsonp=window.webpackJsonp||[]).push([[169],{523:function(_,v,e){"use strict";e.r(v);var a=e(4),t=Object(a.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("h1",{attrs:{id:"二、浏览器缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、浏览器缓存"}},[_._v("#")]),_._v(" 二、浏览器缓存")]),_._v(" "),e("p",[_._v("浏览器中的缓存作用分为 2 种情况")]),_._v(" "),e("p",[_._v("一种是需要发送 HTTP 请求(强缓)，另一种则不用(协缓)；首次缓存、非首次缓存、用户行为与缓存如下：")]),_._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200908001812.png",align:""}}),_._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200908001813.png",align:""}}),_._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200908001814.png",align:""}}),_._v(" "),e("h2",{attrs:{id:"_2-1、强缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1、强缓存"}},[_._v("#")]),_._v(" 2-1、强缓存")]),_._v(" "),e("p",[_._v("首先检查强缓存，通过检查字段来实现；但注意 HTTP/1.0 和 HTTP/1.1 所检查的字段不一样：")]),_._v(" "),e("h3",{attrs:{id:"_2-1-1、expires-http-1-0时期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1、expires-http-1-0时期"}},[_._v("#")]),_._v(" 2-1-1、Expires—HTTP/1.0时期")]),_._v(" "),e("p",[_._v("Expires 即过期时间，告知浏览器在此日期前可直接从缓存中获取数据，而无需再次请求；")]),_._v(" "),e("p",[e("strong",[e("u",[_._v("缺点")])]),_._v("："),e("strong",[_._v("服务器时间与浏览器本地时间可能不一致(修改时间会使缓存失效)")]),_._v("，即时间计算基准不同就会有问题 (已在 HTTP/1.1版本抛弃)")]),_._v(" "),e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[_._v("// 位于服务端返回的响应头\n// 表示资源在 2020 年 07 月 21 号 8 点 41 分过期，若过期就得向服务端请求重新获取资源\n"),e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[_._v("Expires:")]),_._v(" Tue, 21 July 2020 08:41:00 GMT\n")])])]),e("h3",{attrs:{id:"_2-1-2、cache-control-http-1-1时期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2、cache-control-http-1-1时期"}},[_._v("#")]),_._v(" 2-1-2、Cache-Control—HTTP/1.1时期")]),_._v(" "),e("p",[_._v("采用字段 Cache-Control 控制缓存，并用属性 "),e("strong",[_._v("max-age")]),_._v(" 表示缓存过期时间(与 Expires 不同，采用时间段而非具体时间点)；")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("// 位于服务端返回的响应头\n// 表示从收到此响应开始计算，往后的 3600 秒内，均可直接使用缓存\nCache-Control:max-age=3600\n")])])]),e("p",[_._v("Cache-Control 还有诸多属性值来对缓存作更细粒度的操作：")]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("public")]),_._v("：客户端、中间代理服务器均允许缓存资源；")]),_._v(" "),e("li",[e("strong",[_._v("private")]),_._v("：只有客户端能缓存，中间代理服务器不能缓存；")]),_._v(" "),e("li",[e("strong",[_._v("no-cache")]),_._v("：跳过当前强缓存检查阶段，直接发送 HTTP 请求，即直接进入协商缓存阶段；")]),_._v(" "),e("li",[e("strong",[_._v("no-store")]),_._v("：不进行任何形式的缓存；")]),_._v(" "),e("li",[e("strong",[_._v("s-max-age")]),_._v("：作用同 max-age，但针对对象是代理服务器；")]),_._v(" "),e("li",[e("strong",[_._v("max-stale")]),_._v("：能容忍的最大过期时间；")]),_._v(" "),e("li",[e("strong",[_._v("min-fresh")]),_._v("：能容忍的最小新鲜度；")]),_._v(" "),e("li",[_._v("注意：若 "),e("strong",[_._v("Expires")]),_._v(" 和 "),e("strong",[_._v("Cache-Control")]),_._v(" 同时存在，则优先考虑 "),e("strong",[_._v("Cache-Control")]),_._v("；")])]),_._v(" "),e("h2",{attrs:{id:"_2-2、协商缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2、协商缓存"}},[_._v("#")]),_._v(" 2-2、协商缓存")]),_._v(" "),e("p",[_._v("即若强缓存失效，即资源缓存超时，浏览器在请求头中携带相应的 "),e("u",[_._v("缓存tag")]),_._v(" 来向服务器发请求，服务器根据此 tag，来告知浏览器是否继续使用缓存；缓存 Tag 有两种，无分优劣， "),e("strong",[_._v("Last-Modified")]),_._v("、 "),e("strong",[_._v("ETag")])]),_._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200908001815.png",align:""}}),_._v(" "),e("h3",{attrs:{id:"_2-2-1、last-modified"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1、last-modified"}},[_._v("#")]),_._v(" 2-2-1、Last-Modified")]),_._v(" "),e("p",[_._v("响应报文字段，表示资源最后修改时间；使用机制如下：")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("首先，当浏览器首次向服务器发送请求后，服务器会在响应头中加上此字段；")])]),_._v(" "),e("li",[e("p",[_._v("然后，浏览器接收到后，若再次请求，则会在请求头中携带  "),e("strong",[_._v("If-Modified-Since")]),_._v(" 字段，此字段值即服务器传来的最后修改时间；")])]),_._v(" "),e("li",[e("p",[_._v("然后，服务器拿到  请求头中的 "),e("strong",[_._v("If-Modified-Since")]),_._v(" 字段，"),e("u",[_._v("随即与服务器中该资源的最后修改时间作对比")]),_._v(":")]),_._v(" "),e("ul",[e("li",[_._v("若请求头中的值 < 服务器上的最后修改时间，即说明资源已更新，服务端返回新资源，与常规 HTTP 请求响应流程一致；")]),_._v(" "),e("li",[_._v("否则返回 304 状态码，告诉浏览器直接用缓存；")])])])]),_._v(" "),e("h3",{attrs:{id:"_2-2-2、etag"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2、etag"}},[_._v("#")]),_._v(" 2-2-2、ETag")]),_._v(" "),e("p",[_._v("响应报文字段，此字段是服务器基于当前文件内容，给文件生成的唯一标识，即值会随内容更新而改变；使用机制如下：")]),_._v(" "),e("ul",[e("li",[_._v("首先，浏览器接收到 "),e("strong",[_._v("ETag")]),_._v(" 值，若再次请求，则会在请求头中携带 "),e("strong",[_._v("If-None-Match")]),_._v("  字段，此字段值即 "),e("strong",[_._v("ETag")]),_._v(" 值；")]),_._v(" "),e("li",[_._v("然后，服务器接收到 **If-None-Match **后，"),e("u",[_._v("随即与服务器中该资源的 ETag 作对比")]),_._v(":\n"),e("ul",[e("li",[_._v("若两者不相同，即说明资源已更新，服务端返回新资源，与常规 HTTP 请求响应流程一致；")]),_._v(" "),e("li",[_._v("否则返回 304 状态码，告诉浏览器直接用缓存；")])])])]),_._v(" "),e("h3",{attrs:{id:"_2-2-3、两者对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3、两者对比"}},[_._v("#")]),_._v(" 2-2-3、两者对比")]),_._v(" "),e("p",[_._v("精度上，"),e("u",[e("strong",[_._v("ETag")]),_._v(" 优于 "),e("strong",[_._v("Last-Modified")])]),_._v("：原因是前者按照内容给资源上标识，能准确感知资源变化，而后者在某些特殊情况下无法准确感知资源变化：")]),_._v(" "),e("ul",[e("li",[_._v("**"),e("u",[_._v("不该重新请求时，重新请求：")]),_._v("**编辑文件，但实际上文件内容并无变更，服务端并不清楚文件是否真正改变，仍通过最后编辑时间进行判断，此时资源再次被请求时，会被当做新资源处理，缓存作用失效；")]),_._v(" "),e("li",[_._v("**"),e("u",[_._v("该重新请求时，无重新请求：")]),_._v("**Last-Modified 能感知的最小单位时间是秒，若文件在 1 秒内发生多次改变则无法表现出修改，具有局限性；")])]),_._v(" "),e("p",[_._v("性能上，"),e("u",[e("strong",[_._v("Last-Modified")]),_._v(" 优于 "),e("strong",[_._v("ETag")])]),_._v("：前者仅记录时间点，而后者需要服务器根据文件具体内容生成唯一哈希值；")]),_._v(" "),e("p",[_._v("优先上，若两种方式均支持，服务器会"),e("u",[_._v("优先考虑 "),e("strong",[_._v("ETag 机制 (客户端接收角度为 ETag 优先，服务端接收角度为 If-None-Match 优先)")]),_._v("；")])]),_._v(" "),e("h2",{attrs:{id:"_2-3、缓存存放位置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3、缓存存放位置"}},[_._v("#")]),_._v(" 2-3、缓存存放位置")]),_._v(" "),e("p",[_._v("浏览器中的缓存位置一共有四种，按优先级从高到低排列分别是：")]),_._v(" "),e("ul",[e("li",[_._v("Service Worker")]),_._v(" "),e("li",[_._v("Memory Cache")]),_._v(" "),e("li",[_._v("Disk Cache")]),_._v(" "),e("li",[_._v("Push Cache")]),_._v(" "),e("li",[_._v("网络请求")])]),_._v(" "),e("h3",{attrs:{id:"_2-3-1、service-worker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1、service-worker"}},[_._v("#")]),_._v(" 2-3-1、Service Worker")]),_._v(" "),e("p",[e("strong",[_._v("Service Worker")]),_._v("：与 Web Worker类似，是独立的线程(无法直接访问 DOM，无法干扰页面性能)，可帮助实现："),e("u",[_._v("离线缓存")]),_._v("、"),e("u",[_._v("消息推送")]),_._v("、"),e("u",[_._v("网络代理")]),_._v(" 等功能；借助 Service worker 实现的离线缓存即称 "),e("u",[_._v("Service Worker Cache")]),_._v("：可自由选择缓存哪些文件，以及文件的匹配与读取规则，且缓存是持续性的；SW 特点如下:")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("借鉴 "),e("code",[_._v("Web Worker")]),_._v(" 思路，且是 "),e("code",[_._v("PWA")]),_._v(" 重要实现机制；")])]),_._v(" "),e("li",[e("p",[_._v("使用 "),e("code",[_._v("Service Worker")]),_._v(" 会涉及到请求拦截，所以需要用 HTTPS 协议来保证安全，即传输协议必须是 "),e("code",[_._v("HTTPS")]),_._v("；")])]),_._v(" "),e("li",[e("p",[_._v("生命周期包括： install、active、working 三个阶段；一旦 Service Worker 被 install，就将始终存在，只会在 active 与 working 间切换，除非主动终止；这是它可用来实现 "),e("u",[_._v("离线存储")]),_._v(" 的重要先决条件；")])])]),_._v(" "),e("h3",{attrs:{id:"_2-3-2、memory-cache"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2、memory-cache"}},[_._v("#")]),_._v(" 2-3-2、Memory Cache")]),_._v(" "),e("p",[e("strong",[_._v("Memory Cache")]),_._v("：即内存缓存，"),e("u",[_._v("存取效率最高、但存活时间最短")]),_._v("，非持续性，随进程释放而释放；")]),_._v(" "),e("p",[_._v("主要存储当前页面已抓取到的资源, 比如已下载的样式、脚本、图片；特点如下：")]),_._v(" "),e("ul",[e("li",[_._v("存取效率快，但缓存持续时间短，会随着进程释放而释放(一旦关闭 Tab 页即被释放，未关闭但, 排在前排缓存失效)；")]),_._v(" "),e("li",[_._v("从其中读取缓存时，浏览器会忽视 "),e("code",[_._v("Cache-Control")]),_._v("中的一些 "),e("code",[_._v("max-age、no-cache")]),_._v(" 等头部配置, 除非设置  "),e("code",[_._v("no-store")]),_._v(" 头部配置；")]),_._v(" "),e("li",[_._v("几乎所有的请求资源都能进入 "),e("u",[_._v("Memory Cache")]),_._v("，主要分为 "),e("u",[_._v("preloader")]),_._v(" 、"),e("u",[_._v("preload")]),_._v(" ：\n"),e("ul",[e("li",[_._v("preloader：用于"),e("u",[_._v("当浏览器打开网页时，能边解析执行 JS/CSS边请求下一资源")]),_._v("，被请求资源会被放入 "),e("code",[_._v("Memory Cache")]),_._v(" 中，供后续解析执行操作使用；")]),_._v(" "),e("li",[_._v("preload：用于显式指定预加载的资源，比如： "),e("code",[_._v('<link rel="preload">')])])])])]),_._v(" "),e("h3",{attrs:{id:"_2-3-3、disk-cache-http-cache"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-3、disk-cache-http-cache"}},[_._v("#")]),_._v(" 2-3-3、Disk Cache / HTTP Cache")]),_._v(" "),e("p",[e("strong",[_._v("Disk Cache")]),_._v("：即存储在磁盘中的缓存，"),e("u",[_._v("存取效率较低，但存储容量大和存储持续时间长")]),_._v("；")]),_._v(" "),e("p",[_._v("会根据 HTTP header 中的缓存字段来判断哪些资源需要缓存、哪些不需要请求而直接使用、哪些已过期需要重新获取，而若是命中缓存，浏览器会从硬盘中直接读取资源，虽无从内存中读取的快，但却比网络缓存快；")]),_._v(" "),e("ul",[e("li",[_._v("注意：强缓存、协商缓存也是属于 "),e("code",[_._v("Disk Cache")]),_._v("，它们最终都存储在硬盘里；")]),_._v(" "),e("li",[_._v("区别：Memory Cache 与 Disk Cache 存储位置选择的策略如下：\n"),e("ul",[e("li",[_._v("较大的 JS、CSS 文件会直接存入磁盘，反之内存；")]),_._v(" "),e("li",[_._v("当系统内存使用率比较高时，文件优先放入磁盘；")])])])]),_._v(" "),e("h3",{attrs:{id:"_2-3-4、push-cache"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-4、push-cache"}},[_._v("#")]),_._v(" 2-3-4、Push Cache")]),_._v(" "),e("p",[_._v("Push Cache 是指 HTTP2 在 server push 阶段存在的缓存，是浏览器缓存最后一道防线(国内尚未普及)，("),e("a",{attrs:{href:"https://jakearchibald.com/2017/h2-push-tougher-than-i-thought/",target:"_blank",rel:"noopener noreferrer"}},[_._v("资料1"),e("OutboundLink")],1),_._v("、"),e("a",{attrs:{href:"https://www.jianshu.com/p/54cc04190252",target:"_blank",rel:"noopener noreferrer"}},[_._v("资料2"),e("OutboundLink")],1),_._v(")：")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("浏览器只有在 Memory Cache、HTTP Cache 和 Service Worker Cache 均未命中的情况下才会去询问 Push Cache；")])]),_._v(" "),e("li",[e("p",[_._v("Push Cache 是一种存在于会话—Session 阶段的缓存，当 session 终止时(关闭连接/关闭 Tab)，缓存也随之释放且缓存时间短暂(Chrome 中只有5分钟)；")])]),_._v(" "),e("li",[e("p",[_._v("不同的页面只要共享同一个 HTTP2 连接，则就可共享同一个 Push Cache；")]),_._v(" "),e("ul",[e("li",[_._v("注意：视浏览器实现而定，某些浏览器出于对性能考虑，会对相同域名但不同 Tab 标签使用同一 HTTP 连接；")])])]),_._v(" "),e("li",[e("p",[_._v("所有资源都能被推送，且能够被缓存，但 Edge 和 Safari 支持相对较差")])]),_._v(" "),e("li",[e("p",[_._v("可推送 no-cache 和 no-store 资源；")])]),_._v(" "),e("li",[e("p",[_._v("Push Cache 中的缓存只能被使用一次；")])]),_._v(" "),e("li",[e("p",[_._v("浏览器可以拒绝接收已存在的资源推送；")])]),_._v(" "),e("li",[e("p",[_._v("可以给其他域名推送资源；")])])]),_._v(" "),e("h2",{attrs:{id:"_2-4、实际应用与场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4、实际应用与场景"}},[_._v("#")]),_._v(" 2-4、实际应用与场景")]),_._v(" "),e("h3",{attrs:{id:"_2-4-1、实际应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-1、实际应用"}},[_._v("#")]),_._v(" 2-4-1、实际应用")]),_._v(" "),e("ul",[e("li",[_._v("频繁变动的资源使用："),e("code",[_._v("Cache-Control: no-cache")]),_._v("；\n"),e("ul",[e("li",[_._v("注意：使浏览器每次都请求服务器，然后配合 "),e("code",[_._v("ETag")]),_._v(" 或 "),e("code",[_._v("Last-Modified")]),_._v(" 来验证资源是否有效；虽不能节省请求数量，但能显著减少响应数据大小；")])])]),_._v(" "),e("li",[_._v("不频繁变动的资源使用："),e("code",[_._v("Cache-Control: max-age=31536000")]),_._v("，一年的总秒数…\n"),e("ul",[e("li",[_._v("注意：为解决更新问题，可在文件名添加 "),e("code",[_._v("hash")]),_._v("、版本号等动态字段，以实现更改 "),e("u",[_._v("引用URL")]),_._v(" 目的(实现更新内容-重新请求资源)；")])])])]),_._v(" "),e("h3",{attrs:{id:"_2-4-2、用户场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-2、用户场景"}},[_._v("#")]),_._v(" 2-4-2、用户场景")]),_._v(" "),e("ul",[e("li",[_._v("地址输入栏：先查找 Disk Cache 是否有匹配，否则发送请求；")]),_._v(" "),e("li",[_._v("普通 F5 刷新：优先使用 Memory Cache，其次是 Disk Cache；")]),_._v(" "),e("li",[_._v("强制 CtrlF5 刷新：浏览器不使用缓存")])]),_._v(" "),e("h2",{attrs:{id:"_2-5、缓存过程总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-5、缓存过程总结"}},[_._v("#")]),_._v(" 2-5、缓存过程总结")]),_._v(" "),e("p",[_._v("首次，浏览器发起 HTTP 请求到获得请求结果，可分为以下几个过程：")]),_._v(" "),e("ul",[e("li",[_._v("首先，浏览器首次发起 HTTP 请求，在浏览器缓存中没有发现请求的缓存结果和缓存标识；")]),_._v(" "),e("li",[_._v("然后，浏览器向服务器发起 HTTP 请求，获得该请求响应与缓存规则(即 "),e("code",[_._v("Last-Modified")]),_._v(" 或 "),e("code",[_._v("ETag")]),_._v(")；")]),_._v(" "),e("li",[_._v("然后，浏览器将响应内容存入 "),e("code",[_._v("Disk Cache")]),_._v("，将响应内容的引用，存入 "),e("code",[_._v("Memory Cache")]),_._v("；")]),_._v(" "),e("li",[_._v("最后，将响应内容存入 "),e("code",[_._v("Service Worker")]),_._v(" 的 "),e("code",[_._v("Cache Storage")]),_._v("  (若 "),e("code",[_._v("Service Worker")]),_._v(" 的脚本调用了 "),e("code",[_._v("cache.put()")]),_._v(")")])]),_._v(" "),e("p",[_._v("然后，在下一次请求相同资源时:")]),_._v(" "),e("ul",[e("li",[_._v("调用 "),e("code",[_._v("Service Worker")]),_._v(" 的 "),e("code",[_._v("fetch")]),_._v("  事件响应；")]),_._v(" "),e("li",[_._v("查看 "),e("code",[_._v("Memory Cache")])]),_._v(" "),e("li",[_._v("查看 "),e("code",[_._v("Disk Cache")]),_._v("，并通过 "),e("strong",[_._v("Cache-Control")]),_._v(" 验证 "),e("u",[_._v("强缓存")]),_._v(" 是否可用\n"),e("ul",[e("li",[_._v("若可用，直接使用，返回 200 状态码")]),_._v(" "),e("li",[_._v("否则进入 "),e("u",[_._v("协商缓存")]),_._v("，即发送 HTTP 请求，服务器通过请求头中的 "),e("strong",[_._v("If-Modified-Since")]),_._v(" 或 "),e("strong",[_._v("If-None-Match")]),_._v(" 字段检查资源是否更新\n"),e("ul",[e("li",[_._v("若资源更新，返回资源和  200 状态码；")]),_._v(" "),e("li",[_._v("否则，返回 304 状态码，告诉浏览器直接从缓存获取资源；")])])])])])]),_._v(" "),e("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200908001816.png",align:""}})])}),[],!1,null,null,null);v.default=t.exports}}]);