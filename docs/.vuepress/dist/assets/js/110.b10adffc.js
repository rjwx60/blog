(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{498:function(t,s,n){"use strict";n.r(s);var e=n(4),a=Object(e.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"一、基本"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、基本"}},[t._v("#")]),t._v(" 一、基本")]),t._v(" "),n("h2",{attrs:{id:"_1-1、基本"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1、基本"}},[t._v("#")]),t._v(" 1-1、基本")]),t._v(" "),n("ul",[n("li",[n("p",[n("strong",[n("u",[t._v("原型 prototype")])]),t._v("： 创建的每一个函数，都有一个prototype属性，该属性指向一个对象，这个对象就是原型")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("定B：一个简单的对象，用于实现对象的 "),n("strong",[t._v("属性继承")]),t._v("；可简单的理解成对象的爹；")])]),t._v(" "),n("li",[n("p",[t._v("比如：在火狐、谷歌中，每个 JS 对象中都包含一"),n("code",[t._v("__proto__")]),t._v("    属性(非标)指向它爹(该对象原型)，即 "),n("code",[t._v("obj.__proto__")]),t._v(" 进行访问；")])]),t._v(" "),n("li",[n("p",[t._v("定C：原型是构造调用时，也即在实例创建过程中，系统自动创建出来的、与构造函数相关联的一个空的对象，可由 "),n("code",[t._v("构造函数.prototype")]),t._v(" 访问到；")])]),t._v(" "),n("li",[n("p",[t._v("注意："),n("code",[t._v("实例.__proto__")]),t._v("，指向函数原型，于是在原型上增加属性或方法，便可成为实例的共有属性和方法；")])]),t._v(" "),n("li",[n("p",[t._v("补充：原型对象是一个内部对象，官方没有给出能直接访问的方法，浏览器提供了一个 "),n("strong",[t._v("proto")]),t._v(" 属性，通过它来访问对象原型：")]),t._v(" "),n("p",[t._v("原型对象在 JS 标准中用 [[prototype]] 表示 (参见 "),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Glossary/ECMAScript",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMAScript"),n("OutboundLink")],1),t._v(")；")])])])]),t._v(" "),n("li",[n("p",[n("strong",[n("u",[t._v("构造函数")])]),t._v("：可通过 "),n("code",[t._v("new")]),t._v(" 来 "),n("strong",[t._v("新建一个对象")]),t._v(" 的函数；")]),t._v(" "),n("ul",[n("li",[t._v("本质：即函数、专用于同 new 操作符一起实例化对象、new 调用的时候称为构造调用；")]),t._v(" "),n("li",[t._v("约定：大写字母开头、应仅作为构造调用使用；")])])]),t._v(" "),n("li",[n("p",[n("strong",[n("u",[t._v("实例")])]),t._v("：通过构造函数和 "),n("code",[t._v("new")]),t._v(" 创建出来的对象(或中间对象，或函数在中间对象环境下调用产生的结果)，即实例；")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("实例通过"),n("code",[t._v("__proto__")]),t._v("指向原型，通过"),n("code",[t._v("constructor")]),t._v("指向构造函数")]),t._v("；")])])])]),t._v(" "),n("h3",{attrs:{id:"_1-1-1、注意事项"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1、注意事项"}},[t._v("#")]),t._v(" 1-1-1、注意事项")]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091133.png",align:""}}),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091134.png",align:""}}),t._v(" "),n("ul",[n("li",[t._v("注意：每个对象的 "),n("code",[t._v("__proto__")]),t._v(" 属性，指向对象的构造函数的 prototype；")]),t._v(" "),n("li",[t._v("所以：上面图中，对象为 Foo.prototype(原型)，对象的构造函数为 Object，对象指向对象的构造函数的原型即 Object.prototype；")]),t._v(" "),n("li",[t._v("所以：此处对象乃原型，是故原型的构造函数为 Object；")]),t._v(" "),n("li",[t._v("那么：若对象为 Object.prototype(原型)，则又指向谁呢？null；")])]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091135.png",align:""}}),t._v(" "),n("h2",{attrs:{id:"_1-2、关系"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2、关系"}},[t._v("#")]),t._v(" 1-2、关系")]),t._v(" "),n("p",[t._v("在 JS 中，每当定义一个函数数据类型(普通函数、类)时候，都会天生自带一个 prototype 属性，这个属性指向函数的 "),n("strong",[n("u",[t._v("原型对象")])]),t._v("；")]),t._v(" "),n("p",[t._v("当函数经过 new 调用时，此函数便作为 "),n("strong",[n("u",[t._v("构造函数")])]),t._v("，返回一全新的 "),n("strong",[n("u",[t._v("实例")])]),t._v(" 对象，此实例对象有一个__proto__属性，指向构造函数的原型对象；")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实例为 instance, 构造函数为 Object, 构造函数拥有一个 prototype 属性指向原型")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" instance "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prototype "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype\n")])])]),n("h3",{attrs:{id:"_1-2-1、构造与实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1、构造与实例"}},[t._v("#")]),t._v(" 1-2-1、构造与实例")]),t._v(" "),n("p",[t._v("构造函数、实例之间关系：")]),t._v(" "),n("p",[t._v("创建和被创建的关系，实例需通过 "),n("code",[t._v("__proto__")]),t._v(" 找原型，再通过原型的 constructor 找构造其的函数；")]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091136.png",align:""}}),t._v(" "),n("h3",{attrs:{id:"_1-2-2、构造与原型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2、构造与原型"}},[t._v("#")]),t._v(" 1-2-2、构造与原型")]),t._v(" "),n("p",[t._v("构造函数、原型之间关系：")]),t._v(" "),n("p",[t._v("函数的原型对象即："),n("code",[t._v("构造函数的原型对象.constructor === 函数")]),t._v("；")]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091137.png",align:""}}),t._v(" "),n("h3",{attrs:{id:"_1-2-3、实例与原型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3、实例与原型"}},[t._v("#")]),t._v(" 1-2-3、实例与原型")]),t._v(" "),n("p",[t._v("某某实例、原型之间关系**：**")]),t._v(" "),n("p",[t._v("实例的原型 === 构造实例的函数的原型对象，即："),n("code",[t._v("实例.__proto__ === 构造实例的函数.prototype")]),t._v("；")]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091138.png",align:""}}),t._v(" "),n("h3",{attrs:{id:"_1-2-4、prototype-与-proto"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-4、prototype-与-proto"}},[t._v("#")]),t._v(" 1-2-4、prototype 与 proto")]),t._v(" "),n("p",[t._v("显式原型：prototype：")]),t._v(" "),n("ul",[n("li",[n("strong",[n("u",[n("em",[t._v("含义：每一个函数，在创建后都会拥有一个名为 prototype 的属性，属性指向函数的原型对象；")])])])]),t._v(" "),n("li",[t._v("作用：用以实现基于原型的继承与属性共享；\n"),n("ul",[n("li",[t._v("注意：通过 Function.prototype.bind 构造出的函数是例外，其没有 prototype 属性；")])])])]),t._v(" "),n("p",[t._v("隐式原型："),n("code",[t._v("__proto__")]),t._v("：")]),t._v(" "),n("ul",[n("li",[n("strong",[n("u",[n("em",[t._v("含义：任意 JS 对象，都有内置属性 [[prototype]]，指向创建此对象的函数的显式原型 prototype；")])])])]),t._v(" "),n("li",[t._v("作用：用以构成原型链，同样可用以实现基于原型的继承与属性共享，当找寻某对象属性或方法时，便会沿此进行搜索；\n"),n("ul",[n("li",[t._v("ES5 前，没有标准方法访问此属性(prototype)，但大多数浏览器均支持通过 "),n("code",[t._v("__proto__")]),t._v(" 访问；")]),t._v(" "),n("li",[t._v("ES5 后，有标准方法可访问：Object.getPrototypeOf()："),n("code",[t._v("Object.getPrototypeOf(fn) == test.prototype // true")])]),t._v(" "),n("li",[t._v("注意：Object.prototype 是唯一的，没有原型的对象：")])])])]),t._v(" "),n("p",[t._v("两者关系：")]),t._v(" "),n("ul",[n("li",[n("strong",[n("u",[t._v("对象的隐式原型 "),n("code",[t._v("__proto__")]),t._v(" 指向，创建这个对象的函数(constructor)，的显式原型 prototype；")])])]),t._v(" "),n("li",[n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091139.png",align:""}})])]),t._v(" "),n("p",[n("strong",[n("u",[n("em",[t._v("两者区别：")])])])]),t._v(" "),n("ul",[n("li",[t._v("prototype：函数才有此属性；")]),t._v(" "),n("li",[n("code",[t._v("__proto__")]),t._v("：对象皆有的属性，但并非规范属性 (部分浏览器实现，标准属性为 [[Prototype]]")]),t._v(" "),n("li",[n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091140.png",align:""}})])]),t._v(" "),n("p",[t._v("注意事项：")]),t._v(" "),n("ul",[n("li",[n("p",[n("code",[t._v("__proto__")]),t._v(" 为 构造器原型；")]),t._v(" "),n("ul",[n("li",[n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("__proto__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" constructor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实际上是 - 饶了一圈...")]),t._v("\nwindow"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype\nwindow"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("__proto__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype\n")])])])])])]),t._v(" "),n("li",[n("p",[n("code",[t._v("__proto__")]),t._v(" 实际上是 getter setter，源于 Object.prototype，使用时可理解成返回 Object.getPrototypeOf(obj)；")]),t._v(" "),n("ul",[n("li",[n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("Object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrototypeOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" fn__proto__ "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])])])])]),t._v(" "),n("li",[n("p",[n("code",[t._v("__proto__")]),t._v(" 指向取决于对象创建的实现方式，图3-5；")])])]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091141.png",align:""}}),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091142.png",align:""}}),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091143.png",align:""}}),t._v(" "),n("h3",{attrs:{id:"_1-2-5、constructor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-5、constructor"}},[t._v("#")]),t._v(" 1-2-5、constructor")]),t._v(" "),n("p",[t._v("constructor 属性是原型对象的属性，指向这个原型对象所对应的构造函数；")]),t._v(" "),n("p",[t._v("每个对象实例都具有 "),n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor",target:"_blank",rel:"noopener noreferrer"}},[t._v("constructor"),n("OutboundLink")],1),t._v(" 属性，它指向创建该实例的构造器函数")]),t._v(" "),n("ul",[n("li",[t._v("比如：person2.constructor，返回 Person() 构造器")]),t._v(" "),n("li",[t._v("比如：new person2.constructor()，返回 Person() 构造器 创建的新实例")])]),t._v(" "),n("h3",{attrs:{id:"_1-2-6、关系综述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-6、关系综述"}},[t._v("#")]),t._v(" 1-2-6、关系综述")]),t._v(" "),n("p",[t._v("构造函数、原型和实例之间的关系：每个 "),n("u",[t._v("构造函数")]),t._v(" 都有一个 "),n("u",[t._v("原型")]),t._v(" 对象，"),n("u",[t._v("原型")]),t._v(" 对象都包含一个指向 "),n("u",[t._v("构造函数")]),t._v(" 的指针，而 "),n("u",[t._v("实例")]),t._v(" 都包含一个 "),n("u",[t._v("原型对象")]),t._v(" 的指针；")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 三者的关系(再述):")]),t._v("\n实例"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" 原型\n\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("原型")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" 构造函数\n\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("构造函数")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" 原型\n\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("实例")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" 构造函数\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注意: 其实实例上并不是真正有 constructor 这个指针，它其实是从原型链上获取的: ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// instance.hasOwnProperty('constructor') === false ")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 例如: ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// const o = new Object()")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// o.constructor === Object   --\x3e true")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// o.__proto__ = null;")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// o.constructor === Object   --\x3e false ")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象原型 prototype 属性 与 构造函数 prototype 属性间区别：")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前者可通过 Object.getPrototypeOf(obj) 或，已被弃用的 __proto__ 属性获得")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前者是每个实例上都有的属性，后者是构造函数的属性")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 也就是说，Object.getPrototypeOf(new Foobar())和 Foobar.prototype 指向着同一个对象")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// function Foobar(){} -> undefined")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// foobar = new Foobar() -> Foobar {}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object.getPrototypeOf(foobar) == Foobar.prototype -> true")]),t._v("\n")])])]),n("img",{staticStyle:{zoom:"35%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091144.png"}}),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091145.png"}}),t._v(" "),n("h3",{attrs:{id:"_1-2-6-1、大图解说"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-6-1、大图解说"}},[t._v("#")]),t._v(" 1-2-6-1、大图解说")]),t._v(" "),n("p",[t._v("再叙：实例对象的原型([[Prototype]] 或 "),n("code",[t._v("__proto__")]),t._v(") === 构造实例的函数的原型对象，即构造实例的函数的 prototype 属性；")]),t._v(" "),n("p",[t._v("再叙：构造函数的 prototype 属性，即原型对象，又可作为新的实例对象，实例对象的原型又指向下一轮；")]),t._v(" "),n("p",[t._v("再叙：一直到达 Object.prototype，其原型，即 "),n("code",[t._v("Object.prototype.__proto__ === null")]),t._v("；")]),t._v(" "),n("p",[t._v("再叙："),n("code",[t._v("对象.__proto__…..__proto__")]),t._v("为 Object.prototype，随即 "),n("code",[t._v("Object.prototype. __proto__")]),t._v(" 指向 Null；")]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091146.png",align:""}}),t._v(" "),n("ul",[n("li",[n("p",[t._v("分析："),n("code",[t._v("__proto__")]),t._v(" 即实例对象的原型 "),n("code",[t._v("[[Prototype]]")]),t._v(";")])]),t._v(" "),n("li",[n("p",[t._v("注意："),n("code",[t._v("__proto__")]),t._v(" 是私有属性，现代浏览器将其暴露给用户，修改此值会改变继承关系；")])]),t._v(" "),n("li",[n("p",[t._v("分析：函数构建出的实例对象的原型 "),n("code",[t._v("__proto__")]),t._v("，指向函数的原型 "),n("code",[t._v("Foo.prototype")]),t._v("，图左上角；")])]),t._v(" "),n("li",[n("p",[t._v("分析：函数的属性 prototype，指向函数原型，即 "),n("code",[t._v("Foo.prototype")]),t._v("，图中上方；")])]),t._v(" "),n("li",[n("p",[t._v("分析：函数原型的原型，即 "),n("code",[t._v("Foo.prototype.__proto__")]),t._v(" ，指向 Object 原型 "),n("code",[t._v("Object.prototype")]),t._v("，图右上角；")])]),t._v(" "),n("li",[n("p",[t._v("注意：唯一例外：Function 构造函数，可用 "),n("code",[t._v("Function.__proto__")]),t._v(" 来访问 "),n("code",[t._v("Function.prototype")])]),t._v(" "),n("ul",[n("li",[t._v("一般情况是：实例的__proto__指向实例构造函数的 prototype ;")])])]),t._v(" "),n("li",[n("p",[t._v("因为：Function 构造函数即其自身，故作为实例化对象来访问；")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("Function.__proto__(作为实例) == Function.prototype(作为构造函数)")]),t._v("；")])])]),t._v(" "),n("li",[n("p",[t._v("注意：唯一例外："),n("code",[t._v("Function.prototype")]),t._v(" 并非普通对象，而是函数对象 (特殊匿名函数，此函数的 "),n("code",[t._v("__proto__")]),t._v(" 指向 Object.prototype)；")])]),t._v(" "),n("li",[n("p",[t._v("而且：所有构造函数中，只有 Function 的 prototype 属性为函数")])])]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091147.png",align:""}}),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091148.png",align:""}}),t._v(" "),n("h3",{attrs:{id:"_1-2-6-2、大图解说"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-6-2、大图解说"}},[t._v("#")]),t._v(" 1-2-6-2、大图解说")]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091149.png",align:""}}),t._v(" "),n("p",[t._v("注意：任何对象均函数，均继承 Function 所有属性和方法，而 Function 是内置的构造函数也是对象，均继承 Object 的所有属性方法；")]),t._v(" "),n("p",[t._v("注意：各种 function、Object、Function 等实际上均为 new Function() 后的实例，而这些实例原型 "),n("code",[t._v("__proto__")]),t._v(" 均指向 Function.prototype；")]),t._v(" "),n("p",[t._v("同理：Object、Number、String、Array、Function、Date 等均为函数，而所有函数均由 Function 创建，故其原型 "),n("code",[t._v("__proto__")]),t._v(" 指向 Function.prototype：")]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091150.png",align:""}}),t._v(" "),n("h2",{attrs:{id:"_1-3、new"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3、new"}},[t._v("#")]),t._v(" 1-3、new")]),t._v(" "),n("h3",{attrs:{id:"_1-3-1、new-过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1、new-过程"}},[t._v("#")]),t._v(" 1-3-1、new 过程")]),t._v(" "),n("img",{staticStyle:{zoom:"55%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091151.png",align:""}}),t._v(" "),n("p",[t._v("构造调用过程即 new 过程：")]),t._v(" "),n("ul",[n("li",[t._v("首先，创建全新的对象 (中间对象) obj；")]),t._v(" "),n("li",[t._v("然后，新对象会被执行 [[ 原型 ]] 连接 (将中间对象的原型，指向函数原型，此后便可使用函数原型上的方法和属性)；\n"),n("ul",[n("li",[n("code",[t._v("obj.__proto__ = Target.prototype")])])])]),t._v(" "),n("li",[t._v("然后，新对象会绑定到函数调用的 this (即将函数内部 this 指向中间对象)；")]),t._v(" "),n("li",[t._v("最后，若函数返回基本类型，则返回中间对象；若返回对象，则代替中间对象，返回函数返回的对象；")])]),t._v(" "),n("p",[t._v("再说：new 调用过程：")]),t._v(" "),n("ul",[n("li",[t._v("它创建了一个全新的对象")]),t._v(" "),n("li",[t._v("它会被执行[[Prototype]](也即 "),n("code",[t._v("__proto__")]),t._v(")链接")]),t._v(" "),n("li",[t._v("它使 this 指向新创建的对象")]),t._v(" "),n("li",[t._v("通过 new 创建的每个对象将最终被[[Prototype]]链接到这个函数的prototype对象上")]),t._v(" "),n("li",[t._v("如果函数没有返回对象类型 Object(包含Functoin, Array, Date, RegExg, Error)，那么new表达式中的函数调用将返回该对象引用")])]),t._v(" "),n("p",[t._v("再说：new 调用过程：")]),t._v(" "),n("ul",[n("li",[t._v("创建(或者说构造)一个全新对象；")]),t._v(" "),n("li",[t._v("这个新对象会被执行 [[ Prototype ]] 连接；")]),t._v(" "),n("li",[t._v("这个新对象会绑定到函数调用的 this；")]),t._v(" "),n("li",[t._v("若函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象；")])]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091152.png",align:""}}),t._v(" "),n("p",[t._v("再说：new 调用过程：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("1、new 过程中，内部会创建一中间对象，并继承构造函数 prototype")]),t._v("；以继承构造函数原型上的属性和方法；")]),t._v(" "),n("li",[n("strong",[t._v("2、在中间对象中执行构造函数(apply)，以修改 this 指向为返回值/中间对象")]),t._v("；以实现构造函数内的赋值操作；")]),t._v(" "),n("li",[n("strong",[t._v("3、返回值")]),t._v(" (规范规定，若构造方法返回对象，则返回该对象，否则返回中间对象)；")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// new 是关键字, 这里用函数来模拟, new Foo(args) <=> myNew(Foo, args)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("myNew")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1、创建新对象, 并继承构造方法的 prototype 属性")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为了把 obj 挂原型链上, 继承构造函数原型上的属性和方法，相当于 obj.__proto__ = Foo.prototype ")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n  \n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2、执行构造方法, 并为其绑定新 this")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为了让构造方法能进行 this.name = name 类似操作,为了执行构造函数内的赋值操作, args 是构造方法的入参, 因为此处用 myNew 模拟, 故入参从 myNew 传入")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3、若构造方法已 return 了一个对象，则就返回该对象，否则返回 myNew 创建的新对象")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一般情况下，构造方法不会返回新实例，但使用者可以选择返回新实例来覆盖 new 创建的对象")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[object Object]'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" obj\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 测试：")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" newObj "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("myNew")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'zhangsan'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newObj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                 "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Foo {name: "zhangsan"}')]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newObj "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),n("h3",{attrs:{id:"_1-3-2、创建对象方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2、创建对象方式"}},[t._v("#")]),t._v(" 1-3-2、创建对象方式")]),t._v(" "),n("p",[t._v("创建对象的三种方式：字面量、new、Object.create()，但本质的只有1种：new；")]),t._v(" "),n("ul",[n("li",[t._v("字面量是方便创建对象的语法糖，本质是 new Object()")]),t._v(" "),n("li",[t._v("new Object 内部还是通过 new 创建")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object.create")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("o")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("F")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("F")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" o"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("F")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"_1-4、原型链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-4、原型链"}},[t._v("#")]),t._v(" 1-4、原型链")]),t._v(" "),n("p",[n("strong",[n("u",[t._v("原型链")])]),t._v("：即 JS 对象通过 "),n("code",[t._v("__proto__")]),t._v("  指向父类对象，直到指向 Object 对象为止，形成的一个原型指向的链条；")]),t._v(" "),n("p",[n("strong",[n("u",[t._v("原型链")])]),t._v("：当访问一对象的属性/方法时，首先在该对象上查找，然后查找该对象原型，以及该对象原型的原型，逐层上找，直到匹配属性/方法或达原型链尾-null；")]),t._v(" "),n("p",[n("strong",[n("u",[t._v("原型链")])]),t._v("：即相互关联的原型组成的链条结构；")]),t._v(" "),n("p",[t._v("[[Prototype]] 内置属性，其实就是对其他对象的引用，几乎所有对象在创建时 [[Prototype]] 属性都会被赋予一非空值；")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("查找操作：")]),t._v(" "),n("ul",[n("li",[t._v("如果，在对象上没有找到需要的属性或者方法引用，引擎就会继续在 [[Prototype]] 关联的对象上进行查找；")]),t._v(" "),n("li",[t._v("如果，在后者中也没有找到需要的引用就会继续查找它的 [[Prototype]]，以此类推；")]),t._v(" "),n("li",[t._v("这一系列对象的链接即 "),n("strong",[n("u",[t._v("原型链")])]),t._v("；")])])]),t._v(" "),n("li",[n("p",[t._v("Get 操作：试图引用对象的属性时会触发[[Get]] 操作，比如 myObject.a：")]),t._v(" "),n("ul",[n("li",[t._v("首先，检查对象本身是否有这个 [[Prototype]] 内置属性，若有则使用它，若没有，则需使用对象的 [[Prototype]] 链；")]),t._v(" "),n("li",[t._v("但若，anotherObject 中也找不到 a 且 [[Prototype]] 链不为空，则继续查找下去，此过程会持续到找到匹配属性名或查找完整条 [[Prototype]] 链；")]),t._v(" "),n("li",[t._v("最后，若还是找不到那个值，[[Get]] 操作返回 undefined；")])])]),t._v(" "),n("li",[n("p",[t._v('Set 操作：试图给一个 对象设置属性 或 修改已有的属性值会触发 [[Set]] 操作，myObject.foo = "bar”：')]),t._v(" "),n("ul",[n("li",[t._v("首先，若 myObject 对象中包含名为 foo 的普通数据访问属性，则只修改已有属性值；\n"),n("ul",[n("li",[t._v("若 myObject 的 [[Prototype]] 链上层也有 foo，此时发生屏蔽，因 myObject.foo 总是会选择原型链中最底层的 foo 属性；")])])]),t._v(" "),n("li",[t._v("然后，若 foo 非直接存在于 myObject 中，[[Prototype]] 链就会被遍历，类似 [[Get]] 操作：\n"),n("ul",[n("li",[t._v("若原型链上找不到 foo，foo 就会被直接添加到 myObject 上。")]),t._v(" "),n("li",[t._v("若原型链上存在 foo (在 [[Prototype]] 链上层存在名为 foo)：\n"),n("ul",[n("li",[t._v("情况1：其为没有被标记为只读(writable:false)，则会直接在 myObject 中添加一个名为 foo 的新属性，它是屏蔽属性；")]),t._v(" "),n("li",[t._v("情况2：其为被标记为只读(writable:false)，则无法修改已有属性或者在 myObject 上创建屏蔽属性；\n"),n("ul",[n("li",[t._v("如果，运行在严格模式下会抛出一个错误，否则，这条赋值语句会被忽略，总之，不会发生屏蔽；")])])]),t._v(" "),n("li",[t._v("情况3：其为一个 setter ，则一定会调用这个 setter；\n"),n("ul",[n("li",[t._v("foo 不会被添加到(或说屏蔽于)myObject，也不会重新定义 foo 这个 setter；")])])])])])])])])])]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091153.png",align:""}}),t._v(" "),n("ul",[n("li",[t._v("注意：使用 for..in ，遍历对象时原理和查找 [[Prototype]] 链类似，任何可通过原型链访问到且是 enumerable的属性都会被枚举；")]),t._v(" "),n("li",[t._v("注意：使用 in 操作符，检查属性在对象中是否存在时，同样会查找对象的整条原型链(此时无论属性是否可枚举)；")]),t._v(" "),n("li",[t._v("注意：所有普通 [[Prototype]] 链，最终均指向内置的 Object.prototype：\n"),n("ul",[n("li",[t._v("由于所有普通内置对象都“源于”(将 [[Prototype]] 链的顶端设置为)此 Object.prototype 对象，故包含 JS 中许多通用的功能：")]),t._v(" "),n("li",[t._v("比如： .toString() 和 .valueOf()， .hasOwnProperty(..) 和 .isPrototypeOf(..)；")])])])]),t._v(" "),n("p",[n("strong",[n("u",[t._v("原型链")])]),t._v("：每一对象都有自己的原型对象：实例对象有原型，原型对象也是对象(此处原型对象相当于上一级原型的实例)，故也有其原型(上一级原型对象)，如此形成的一个链式结构；")]),t._v(" "),n("p",[t._v("比如：下图："),n("code",[t._v("实例.__proto__")]),t._v("指向其原型，"),n("code",[t._v("原型.__proto__")]),t._v("又指向其原型，然后指向 Object.prototype，最终指向 null；")]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091154.png",align:""}}),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091155.png",align:""}}),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091156.png",align:""}}),t._v(" "),n("p",[n("strong",[n("u",[t._v("原型链")])]),t._v("：Js 是一种基于原型的语言：每个对象，拥有一个原型对象，对象以其原型为模板，从原型继承方法和属性原型对象也可能拥有原型，并从中继承方法和属性，一层一层、以此类推，此种关系被称为原型链；")]),t._v(" "),n("ul",[n("li",[t._v("意义：它解释了为何一个对象会拥有，“定义在其他对象中的属性和方法”。更准确说，它解释了为何一个对象会拥有，定义在 Object的，构造器函数(constructor functions)上的，prototype属性上的属性和方法，而非定义在对象实例上；")]),t._v(" "),n("li",[t._v("注意：Js 中并不是复制，而是建立链接：传统的 OOP 中，定义类后，创建对象实例时，类中定义的所有属性和方法都被，复制到实例中，但在 JS 中，并不是复制在 JS 中，是在对象实例，和它的构造器间，建立一个链接(它是 "),n("code",[t._v("__proto__")]),t._v(" 属性，是从构造函数的prototype 属性派生的)之后通过上溯原型链，在构造器中找到这些属性和方法")]),t._v(" "),n("li",[t._v("重申：原型链中的方法和属性，没有被复制到其他对象，它们的访问需要通过原型链；")]),t._v(" "),n("li",[t._v("注意：Object中有大量的属性和方法，但实际被继承的，就只有那些以 Object.prototype 开头的属性；是因为继承的属性和方法是定义在 prototype 属性之上的；比如："),n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/watch",target:"_blank",rel:"noopener noreferrer"}},[t._v("Object.prototype.watch()"),n("OutboundLink")],1),t._v("、"),n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Object.prototype.valueOf()"),n("OutboundLink")],1),t._v(" 等；但："),n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is",target:"_blank",rel:"noopener noreferrer"}},[t._v("Object.is()"),n("OutboundLink")],1),t._v("、"),n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys",target:"_blank",rel:"noopener noreferrer"}},[t._v("Object.keys()"),n("OutboundLink")],1),t._v("等不在 prototype 对象内的成员，仅能被 Object() 构造器自身使用，不会被对象实，或继承自 Object() 的对象类型所继承；")]),t._v(" "),n("li",[t._v("prototype 属性的值是一个对象，希望被原型链下游的对象继承的属性和方法，都被储存在其中；")]),t._v(" "),n("li",[t._v("注意：一般很少将属性定义在构造器上的prototype上，因为不灵活；")]),t._v(" "),n("li",[n("strong",[n("u",[t._v("原型链模型")])]),t._v("：上游对象的方法，不会复制到下游的对象实例中；下游对象本身虽然没有定义这些方法，但通过上溯原型链、能从上游对象中找到它们；这种继承模型提供了一个强大而可扩展的功能系统；")])]),t._v(" "),n("p",[n("strong",[n("u",[t._v("原型链")])]),t._v("：即由原型对象组成，每个对象都有 "),n("code",[t._v("__proto__")]),t._v(" 属性，指向了创建该对象的构造函数的原型，"),n("code",[t._v("__proto__")]),t._v(" 将对象连接起来组成了原型链，是一个用来 "),n("u",[t._v("实现继承和共享属性")]),t._v(" 的有限的对象链；它有两个机制和特点：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("属性查找机制")]),t._v("：当查找对象的属性时，若实例对象自身不存在该属性，则沿着原型链往上一级查找，找到时则输出，不存在时，则继续沿着原型链往上一级查找，直至最顶级的原型对象 "),n("code",[t._v("Object.prototype")]),t._v("，如还是没找到，则输出 "),n("code",[t._v("undefined")]),t._v("；")]),t._v(" "),n("li",[t._v("比如：person.valueOf()；")]),t._v(" "),n("li",[n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091157.png",align:""}})]),t._v(" "),n("li",[n("strong",[t._v("属性修改机制")]),t._v("：只会修改实例对象本身的属性，若不存在，则进行添加该属性，若需要修改原型的属性时，则可用: "),n("code",[t._v("b.prototype.x = 2")]),t._v("；但会造成所有继承于该对象的实例的属性发生改变；")]),t._v(" "),n("li",[t._v("特点：对象的 hasOwnProperty() 来检查对象自身中是否含有该属性；")]),t._v(" "),n("li",[t._v("特点：使用 in 检查对象中是否含有某个属性时，如果对象中没有但是原型链中有，也会返回 true；")])]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091158.png"}}),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091159.png"}}),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091200.png"}}),t._v(" "),n("h2",{attrs:{id:"_1-5、instance-of"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5、instance-of"}},[t._v("#")]),t._v(" 1-5、instance of")]),t._v(" "),n("h3",{attrs:{id:"_1-5-1、理解一"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-1、理解一"}},[t._v("#")]),t._v(" 1-5-1、理解一")]),t._v(" "),n("p",[t._v("在实例的 "),n("strong",[t._v("原型对象链")]),t._v(" 中找到该构造函数的 "),n("code",[t._v("prototype")]),t._v(" 属性所指向的 "),n("strong",[t._v("原型对象")]),t._v("，就返回"),n("code",[t._v("true")]),t._v("：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// __proto__: 代表原型对象链")]),t._v("\ninstance"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("__proto__"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" instance"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// return true")]),t._v("\n")])])]),n("h3",{attrs:{id:"_1-5-2、理解二"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-2、理解二"}},[t._v("#")]),t._v(" 1-5-2、理解二")]),t._v(" "),n("p",[t._v("应理解为：")]),t._v(" "),n("p",[t._v("检测左侧对象 L 的原型链上(即 L."),n("strong",[t._v("proto")]),t._v("."),n("strong",[t._v("proto")]),t._v("……)，是否存在右侧 R 的 prototype 原型(即 R.prototype)，如下图；")]),t._v(" "),n("p",[t._v("或者：用以判断某个构造函数，的 prototype 属性，是否存在于另外一个要检测对象，的原型链上；")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("R")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("R")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype \n")])])]),n("h3",{attrs:{id:"_1-5-3、模拟实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-3、模拟实现"}},[t._v("#")]),t._v(" 1-5-3、模拟实现")]),t._v(" "),n("p",[t._v("instanceof 运算时会递归查找 left Value 的原型链，即 "),n("code",[t._v("left Value.__proto__.__proto__.__proto__")]),t._v("... ，直至找到 / 到达顶层为止")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("instance_of")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("R")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("O")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("R")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 取 R 显式原型")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 取 L 隐式原型")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("O")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注意严格相等")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"_1-5-4、注意事项与示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-4、注意事项与示例"}},[t._v("#")]),t._v(" 1-5-4、注意事项与示例")]),t._v(" "),n("ul",[n("li",[n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("     \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...  ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("xxx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])])])]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091201.png",align:""}}),t._v(" "),n("ul",[n("li",[t._v("instanceof 工作机制；若修改 prototype 的 值，则会改变原有(图2)")])]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091202.png",align:""}}),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091203.png",align:""}}),t._v(" "),n("ul",[n("li",[t._v("Fun 是单纯的函数，"),n("code",[t._v("Fun.__proto__")]),t._v(" 属于 Function.prototype，除非 new 出来，否则不属于 Fun.prototype；")])]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091204.png",align:""}}),t._v(" "),n("ul",[n("li",[t._v("JS 在访问 str 属性时创建临时 String 对象 (假设叫tmpStr)，并在得到此返回值时销毁临时对象，故此处是 "),n("code",[t._v("tmpStr.__proto__")]),t._v(" 的值；而引用类型的字面量和基础类型的不一样(图2)；")])]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091205.png",align:""}}),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091206.png",align:""}}),t._v(" "),n("ul",[n("li",[t._v("对于三种基本类型的字面声明，instanceof 均返回 false；而其他类型的字面量声明则为 true；")])]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091207.png",align:""}}),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091208.png",align:""}}),t._v(" "),n("ul",[n("li",[n("code",[t._v("Object.prototype.__proto__")]),t._v(" 为 null，但 null 不等于 "),n("code",[t._v("Object.prototype")]),t._v("；")])]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091209.png",align:""}}),t._v(" "),n("h3",{attrs:{id:"_1-5-5、js-object-layout"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-5、js-object-layout"}},[t._v("#")]),t._v(" 1-5-5、JS Object Layout")]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091146.png",align:""}}),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Object instanceof Object")])])]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091210.png",align:""}}),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Function instanceof Function")])])]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091211.png",align:""}}),t._v(" "),n("ul",[n("li",[n("strong",[t._v("Foo instanceof Foo")])])]),t._v(" "),n("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200909091212.png",align:""}})])}),[],!1,null,null,null);s.default=a.exports}}]);