(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{497:function(t,s,a){"use strict";a.r(s);var e=a(4),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"一、整体流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、整体流程"}},[t._v("#")]),t._v(" 一、整体流程")]),t._v(" "),a("p",[t._v("分析对象为 Vue2.x 完整版(Runtime+Compiler)；")]),t._v(" "),a("ul",[a("li",[a("strong",[a("u",[a("em",[t._v("完整版")])])]),t._v(" ：运行时版 + Compiler (将字符串模板 template 编译为 render 函数)；\n"),a("ul",[a("li",[t._v("entry-runtime-with-compiler，挂载前需做编译处理，所以其重写了 Vue.prototype.$mount 方法，并添加了 Vue.compile 全局API；")]),t._v(" "),a("li",[t._v("使用完整版，允许在代码运行的时现场编译模板，在不配合构建工具的情况下可直接使用，但包体积偏大；")])])]),t._v(" "),a("li",[a("strong",[a("u",[a("em",[t._v("运行时版")])])]),t._v("：将编译步骤(Compiler)交给构建工具处理(在脚手架配置 vue-loader )的版本；\n"),a("ul",[a("li",[t._v("entry-runtime，最后直接输出 Vue 实例，编译部分交由构建工具处理、可减少包体积 30%；")])])])]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200927100917.png",alt:"截屏2020-09-27 上午10.09.10"}}),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200908132749.png"}}),t._v(" "),a("p",[a("strong",[a("u",[a("em",[t._v("构建流程")])])]),t._v("：")]),t._v(" "),a("ul",[a("li",[a("u",[t._v("初始化前")]),t._v("，创建 Vue 实例对象")]),t._v(" "),a("li",[a("u",[t._v("初始化-init")]),t._v("，初始化生命周期、事件中心和渲染、执行 "),a("code",[t._v("beforeCreate")]),t._v(" 钩子、初始化 "),a("code",[t._v("data")]),t._v("、"),a("code",[t._v("props")]),t._v("、"),a("code",[t._v("computed")]),t._v("、"),a("code",[t._v("watcher")]),t._v("、执行 "),a("code",[t._v("created")]),t._v(" 钩子等\n"),a("ul",[a("li",[t._v("注意：初始化阶段涉及的数据绑定过程略过，请看响应式过程；")]),t._v(" "),a("li",[t._v("注意：初始化阶段为 Vue 原型添加属性和方法，即实例属性和实例方法，并添加全局的API，也就是静态的方法和属性：\n"),a("ul",[a("li",[t._v("初始化原型链属性 sateMixin："),a("code",[t._v("$data(只读属性)、$props(只读属性)、$set、$delete、$watch")]),t._v("；")]),t._v(" "),a("li",[t._v("初始化原型链方法(事件) eventsMixin："),a("code",[t._v("$on、$once、$off、$emit")]),t._v("；")]),t._v(" "),a("li",[t._v("初始化原型链方法(生命周期) lifecycleMixin："),a("code",[t._v("_update、$forceUpdate、$destory")]),t._v("；")]),t._v(" "),a("li",[t._v("初始化(渲染函数) renderMixin、nextTick："),a("code",[t._v("installRenderHelpers、_render、nextTick")]),t._v("；")]),t._v(" "),a("li",[t._v("在 Vue 构造函数上添加全局 API(initGlobalAPI)，类似整理 Vue.prototype 上的属性和方法：\n"),a("ul",[a("li",[t._v("比如：get(只读)、util(独立、非公共API)、set、util、set、delete、nextTick、options；")]),t._v(" "),a("li",[t._v("比如：Vue.use(initUse)、Vue.component+Vue.directive+Vue.filter(initAssetRegisters)、Vue.mixin(initMixin)、Vue.extend(initExtend)；")]),t._v(" "),a("li",[t._v("总结：即 Vue 构造函数相关的2个文件：core/instance/index.js，即其父级文件：core/index.js：\n"),a("ul",[a("li",[t._v("前者：定义 Vue 构造函数，并对其原型添加属性和方法，即实例属性和实例方法，是 Vue 构造函数的定义文件；")]),t._v(" "),a("li",[t._v("后者：为 Vue 添加全局的API，也就是静态的方法和属性；")])])])])]),t._v(" "),a("li",[t._v("设置平台化的 Vue.config；\n"),a("ul",[a("li",[t._v("Vue.options：混合2个指令(directives)：model、show；")]),t._v(" "),a("li",[t._v("Vue.options：混合2个组件(components)：Transition、TransitionGroup；")]),t._v(" "),a("li",[t._v("Vue.prototype：2个方法："),a("code",[t._v("__patch__")]),t._v("、$mount；")])])]),t._v(" "),a("li",[t._v("补充：比较 entry-runtime-with-compiler 与 entry-runtime：\n"),a("ul",[a("li",[t._v("后者运行时直接导出 Vue(交给构建工具的编译器编译，所以直接输出Vue)；")]),t._v(" "),a("li",[t._v("前者包含 compiler，挂载前需要做编译处理，故其重写 Vue.prototype.$mount 方法，并添加了 Vue.compile 全局API，最后通过 compilerToFunctions 编译；")])])]),t._v(" "),a("li",[t._v("补充：mergeOptions：涉及处理太多，不一展开，只大概叙述下：\n"),a("ul",[a("li",[t._v("校验组件名字(checkComponents)；")]),t._v(" "),a("li",[t._v("规范化参数(normalize)，统一数组和对象形式为对象；")]),t._v(" "),a("li",[t._v("对于 el、propsData 选项，使用默认的合并策略 defaultStrat(只要子选项不是 "),a("em",[t._v("undefined")]),t._v(" 就使用子选项，否则使用父选项)；")]),t._v(" "),a("li",[t._v("对于 data 选项，使用 mergeDataOrFn 函数进行处理，最终结果是 data 选项将变成一个函数，且该函数的执行结果为真正的数据对象；")]),t._v(" "),a("li",[t._v("对于 生命周期钩子 选项，将合并成数组，使得父子选项中的钩子函数都能够被执行；")]),t._v(" "),a("li",[t._v("对于 directives、filters 以及 components 等资源选项，父子选项将以原型链的形式被处理，所以才能在任何地方都使用内置组件&指令等；")]),t._v(" "),a("li",[t._v("对于 watch 选项的合并处理，类似于生命周期钩子，若父子选项都有相同的观测字段，将被合并为数组，这样观察者都将被执行；")]),t._v(" "),a("li",[t._v("对于 props、methods、inject、computed 选项，父选项始终可用，但是子选项会覆盖同名的父选项字段；")]),t._v(" "),a("li",[t._v("对于 provide 选项，其合并策略使用与 data 选项相同的 mergeDataOrFn 函数；")]),t._v(" "),a("li",[t._v("最后，以上没有提及到的选项都将使默认选项 defaultStrat(只要子选项不是 "),a("em",[t._v("undefined")]),t._v(" 就使用子选项，否则使用父选项)")])])])])])])]),t._v(" "),a("li",[a("u",[t._v("初始化后")]),t._v("，调用 "),a("code",[t._v("$mount")]),t._v(" 方法对 Vue 实例进行挂载(挂载的核心过程包括："),a("strong",[a("u",[t._v("模板编译、渲染、更新")])]),t._v("  三个过程)；")]),t._v(" "),a("li",[a("u",[t._v("编译")]),t._v("：若无在 Vue 实例上定义 "),a("code",[t._v("render")]),t._v(" 方法而定义 "),a("code",[t._v("template")]),t._v("，则需经历编译阶段：先将 "),a("code",[t._v("template字符串")]),t._v(" 编译成 "),a("code",[t._v("render function")]),t._v("；编译如下：\n"),a("ul",[a("li",[t._v("首先，"),a("code",[t._v("parse")]),t._v(" 正则解析 "),a("code",[t._v("template")]),t._v(" 字符串形成 AST(抽象语法树，源代码的抽象语法结构的树状表现形式)")]),t._v(" "),a("li",[t._v("然后，"),a("code",[t._v("optimize")]),t._v(" 标记静态节点跳过 Diff 算法 (Diff 算法是逐层进行比对，只有同层级的节点进行比对，因此时间的复杂度只有 O(n)；")]),t._v(" "),a("li",[t._v("最后，"),a("code",[t._v("generate")]),t._v(" 将 AST 转化成 "),a("code",[t._v("render function")]),t._v(" 字符串；")])])]),t._v(" "),a("li",[a("u",[t._v("渲染")]),t._v("，编译成 "),a("code",[t._v("render函数")]),t._v(" 后，调用 "),a("code",[t._v("$mount")]),t._v(" 的 "),a("code",[t._v("mountComponent")]),t._v(" 方法：其先执行 "),a("code",[t._v("beforeMount")]),t._v(" 钩子，然后实例化一个 "),a("code",[t._v("渲染Watcher")]),t._v(" (方法核心)，在其回调函数(初始化时执行，及组件实例中监测到数据发生变化时执行)中，调用 "),a("code",[t._v("updateComponent")]),t._v(" 方法(此法调用 "),a("code",[t._v("render")]),t._v(" 方法将 "),a("code",[t._v("render函数")]),t._v(" 生成 "),a("code",[t._v("虚拟Node")]),t._v("，最终调用 "),a("code",[t._v("update")]),t._v(" 方法更新 DOM，见下方 "),a("u",[t._v("更新")]),t._v(" 部分)；\n"),a("ul",[a("li",[t._v("补充："),a("code",[t._v("render")]),t._v(" 方法参一是 "),a("code",[t._v("createElement")]),t._v(" (或说是 "),a("code",[t._v("h")]),t._v(" 函数)；")]),t._v(" "),a("li",[t._v("注意：真实 DOM 元素庞大，而浏览器标准将 DOM 设计地十分复杂；若频繁操作 DOM 会有性能问题；而 "),a("code",[t._v("虚拟DOM")]),t._v(" 是用原生 JS 对象去描述 DOM 节点，故其比创建 DOM 代价要小，且便于修改属性、对比差异、还能实现跨平台方案；")])])]),t._v(" "),a("li",[a("u",[t._v("更新")]),t._v("，生成 "),a("code",[t._v("虚拟DOM树")]),t._v(" 后，需要将 "),a("code",[t._v("虚拟DOM树")]),t._v(" 转化成 "),a("code",[t._v("真实DOM节点")]),t._v("，此时需要调用 "),a("code",[t._v("update")]),t._v(" 方法，"),a("code",[t._v("update")]),t._v("方法会调用 "),a("code",[t._v("pacth")]),t._v(" 方法将 "),a("code",[t._v("虚拟DOM")]),t._v(" 转换成 真正DOM 节点；(注意上图忽略了新建真实 DOM 的情况—若无旧的虚拟 Node，则可直接通过 "),a("code",[t._v("createElm")]),t._v(" 创建真实 DOM 节点)，而此处重点分析在已有虚拟 Node 的情况下，会通过 "),a("code",[t._v("sameVnode")]),t._v(" 判断当前需要更新的 Node节点，是否与旧的 Node 节点相同(比如若设置的 "),a("code",[t._v("key")]),t._v(" 属性发生了变化，则节点显然不同—所以 key 作用在于节点的最大化复用)，若节点不同则利用新节点替换旧节点，若相同且存在子节点，则需调用 "),a("code",[t._v("patchVNode")]),t._v(" 方法执行 Diff 算法更新 DOM，从而提升 DOM 操作的性能；")])]),t._v(" "),a("p",[a("strong",[a("u",[a("em",[t._v("响应式流程总结")])])]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("在 "),a("code",[t._v("Init")]),t._v(" 初始化过程中，Vue 会遍历 data 选项属性，并利用  "),a("code",[t._v("Object.defineProperty")]),t._v(" 方法(IE9+)(利用 JS 对象访问器属性 "),a("code",[t._v("Get/Set")]),t._v("，Vue3 中则使用 ES6 "),a("code",[t._v("Proxy")]),t._v(" 来优化)，(重新定义 data 中的所有属性)以监听 Vue 实例的响应式数据的变化，从而实现 "),a("u",[t._v("数据劫持")]),t._v(" 能力；")]),t._v(" "),a("li",[t._v("然后，在初始化流程中的编译阶段，当 "),a("code",[t._v("render function")]),t._v(" 被渲染时，会读取 Vue 实例中和视图相关的响应式数据，此时触发 "),a("code",[t._v("Getter")]),t._v("  函数进行 "),a("u",[t._v("依赖收集")]),t._v(" (将当前组件观察者 "),a("code",[t._v("Watcher")]),t._v(" 对象存放到当前闭包的订阅者 "),a("code",[t._v("Dep")]),t._v(" 的 "),a("code",[t._v("subs")]),t._v(" 中，进行依赖收集还有 computed watcher,user watcher实例)，此时数据劫持功能和 "),a("u",[t._v("发布订阅模式")]),t._v("，就实现了一 MVVM 模式中的  "),a("u",[t._v("Binder")]),t._v("，之后就是正常的渲染和更新流程；")]),t._v(" "),a("li",[t._v("然后，当数据属性发生变化或视图导致的数据发生变化时，触发数据劫持的 "),a("code",[t._v("Setter")]),t._v(" 函数，"),a("code",[t._v("Setter")]),t._v(" 会通知初始化时 "),a("u",[t._v("收集的依赖")]),t._v(" 中的 "),a("code",[t._v("Dep")]),t._v(" 中的与视图相应的 "),a("code",[t._v("Watcher")]),t._v("，"),a("code",[t._v("Wather")]),t._v(" 就会再次通过 "),a("code",[t._v("update")]),t._v(" 方法来更新视图，从而使它关联的组件重新渲染；")]),t._v(" "),a("li",[t._v("注意：可发现只要视图中添加监听事件(Get/Set+处理函数)，自动变更对应的数据变化时，就可实现数据和视图的双向绑定；")])]),t._v(" "),a("p",[a("strong",[a("u",[t._v("响应式流程实现要点：")])])]),t._v(" "),a("p",[t._v("监听器 Observer：")]),t._v(" "),a("ul",[a("li",[t._v("对数据对象进行遍历(含子属性对象属性)，利用 Object.defineProperty 为属性添加 Get/Set，定义依赖收集和派发更新行为；")])]),t._v(" "),a("p",[t._v("解析器 Compile：")]),t._v(" "),a("ul",[a("li",[t._v("解析 Vue 模板，将模板中的变量，替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数(原生事件—关键)，添\n加监听数据的订阅者，一旦数据变化(原生触发)，触发收到通知，调用更新函数进行数据更新；")])]),t._v(" "),a("p",[t._v("订阅者 Watcher：")]),t._v(" "),a("ul",[a("li",[t._v("Watcher 是前两者间的通信桥梁，主要负责：订阅 Observer 中的属性值变化消息，当收到属性值变化消息时，触发解析器 Compile 中对应的更新函数；实际上 Watcher 实例分为渲染 watcher (render watcher)、计算属性 watcher (computed watcher)、侦听器 watcher (user watcher)三种；\n"),a("ul",[a("li",[t._v("initState 时，对 computed 属性初始化时触发 computed watcher 依赖收集；")]),t._v(" "),a("li",[t._v("initState 时，对侦听属性初始化时，触发 user watcher 依赖收集；")]),t._v(" "),a("li",[t._v("render   时，触发 render watcher 依赖收集；")]),t._v(" "),a("li",[t._v("re-render 时，vm.render 再次执行，会移除所有 subs 中的 watcer 的订阅，重新赋值；")])])])]),t._v(" "),a("p",[t._v("订阅器 Dep：")]),t._v(" "),a("ul",[a("li",[t._v("订阅器采用发布订阅模式(即观察者基础之上增加一调度管理器)，用来收集订阅者 Watcher，以对监听器 Observer 和订阅者 Watcher 进行统一管理(每个响应式对象包括子对象，都拥有一个 Dep 实例(里面的 subs 是存放 Watcher 实例的数组)，当数据有变更时，会通过 dep.notify 通知各个 watcher)；")])]),t._v(" "),a("p",[t._v("上述两者关系：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Dep 是 Observer 与 Watcher 间的调度器，负责更好地、统一地管理 Watcher；")])]),t._v(" "),a("li",[a("p",[t._v("Watcher 中实例化了 dep 并向 dep.subs 中添加了订阅者 watcher，而 dep 通过 notify 遍历了 dep.subs 通知每个 watcher 更新，最后调用每一个 watcher 的 update 方法；")])])]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200908132750.png"}}),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200908132751.png"}}),t._v(" "),a("h1",{attrs:{id:"二、vue相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、vue相关"}},[t._v("#")]),t._v(" 二、Vue相关")]),t._v(" "),a("h2",{attrs:{id:"_2-1、双绑-v-model"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1、双绑-v-model"}},[t._v("#")]),t._v(" 2-1、双绑—v-model")]),t._v(" "),a("p",[t._v("本质是语法糖，可看成 value + input 方法组合；可通过 model 属性的 prop 和 event 属性来进行自定义；")]),t._v(" "),a("p",[t._v("v-model，多用于表单 input、textarea、 select 等元素；")]),t._v(" "),a("p",[t._v("v-model，会根据标签的不同生成不同的事件和属性；")]),t._v(" "),a("ul",[a("li",[t._v("text、textarea元素使用 value 属性和 input 事件；")]),t._v(" "),a("li",[t._v("checkbox、radio使用 checked 属性和 change 事件；")]),t._v(" "),a("li",[t._v("select 字段将 value 作为 prop 并将 change 作为事件；")])]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[t._v("// 1、表单元素 input\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("*v-model*")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")]),t._v(" something"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n// 相当于\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("*v-bind:")]),t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("*va*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("*lue*")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("something"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("*v-on:")]),t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("*input*")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("something = $event. target.value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n// 2、自定义组件，v-model 默认会利用名为 value 的 prop 和 input 事件\n// 父组件:\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("*ModelChild*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("*v-mode*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("*l*")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("*ModelChild*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n// 子组件:\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("{{value}}"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\nprops:{\n\tvalue: *String*\n}\nmethods: {\n\ttest1(){\n\tthis. $emit('input', 'TLP')\n},\n")])])]),a("h2",{attrs:{id:"_2-2、双绑-数组与对象监听"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2、双绑-数组与对象监听"}},[t._v("#")]),t._v(" 2-2、双绑—数组与对象监听")]),t._v(" "),a("p",[t._v("问题：由于 JS 限制，Vue 不能检测到以下数组操作改动：")]),t._v(" "),a("ul",[a("li",[t._v("利用索引直接设置一个数组项时，比如："),a("code",[t._v("vm. items[indexOfItem] = newValue")])]),t._v(" "),a("li",[t._v("修改数组长度时，比如："),a("code",[t._v("vm.items.length = newLength")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解决问题1：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Vue.set")]),t._v("\nVue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index0fItem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vm.$set, Vue.setá)- ↑5I5")]),t._v("\nvm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("$set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index0fItem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Array.prototype.splice")]),t._v("\nvm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("splice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("indexOfItem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解决问题2：splice")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Array.prototype. splice")]),t._v("\nvm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("splice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newlength"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数组长度没有 Set/Get")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为：若知道数组长度，理论上可以预先给所有的索引设置 Set/Get，但实际场景中往往并不知道数组长度(不固定)；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时：预加 Set/Get 成本过大；可通过 Proxy 改进")]),t._v("\n")])])]),a("p",[t._v("Vue 通过遍历数组/对象(若数组/对象中包含着引用类型， 则会对其中的引用类型再次递归遍历)，从而实现对数组和对象内部属性数据进行监听；")]),t._v(" "),a("p",[t._v("但对于数组操作的监听，则通过重写数组方法(原型链重写/劫持)：push、pop、shift、unshift、splice、sort、reverse；使之监听得到更新；")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arrayProto "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arrayMethods "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrayProto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" methodsToPatch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"push"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pop"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"shift"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unshift"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"splice"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sort"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"reverse"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n* Intercept mutating methods and emit events\n*/")]),t._v("\nmethodsToPatch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("method"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cache original method")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" original "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arrayProto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("method"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("def")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrayMethods"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" method"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mutator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("original")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ob "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ob"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" inserted"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("method"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"push"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unshift"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        inserted "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"splice"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        inserted "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inserted"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ob"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("observeArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inserted"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// notify change")]),t._v("\n    ob"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("notify")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n* Observe a list of Array item\n*/")]),t._v("\nObserver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("observeArray")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("observeArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Observe a list of Array items.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("observeArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("items"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// observe 功能为监测数据的变化")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对属性进行递归遍历")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" child0b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("shallow "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// observe 功能为监测数据的变化")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n")])])]),a("h2",{attrs:{id:"_2-3、双绑-vue-set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3、双绑-vue-set"}},[t._v("#")]),t._v(" 2-3、双绑—"),a("u",[t._v("Vue.$set")])]),t._v(" "),a("p",[t._v("Vue.set == vm.$set，而其内部，还是会通过 splice 实现变更检测；")]),t._v(" "),a("ul",[a("li",[t._v("若目标是数组，使用 vue 实现的数组重载方法 splice 实现响应式(所以本质还是通过 splice)；")]),t._v(" "),a("li",[t._v("若目标是对象，判断属性存在，若存在即为响应式，直接赋值；")]),t._v(" "),a("li",[t._v("若目标非响应式，则直接赋值；")]),t._v(" "),a("li",[t._v("若目标属性非响应式，则调用 defineReactive 方法进行响应式处理；")])]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若 target 为数组")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isValidArrayIndex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 修改数组的长度，避免索引>数组长度导致 splcie 执行有误")]),t._v("\n    target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 利用数组的 splice 变异方法触发响应式")]),t._v("\n    target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("splice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" val\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若 key 已存在，则直接修改属性值")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" target "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" val\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" va1\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ob "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ob__\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若 target 非响应式数据，则直接赋值")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("ob"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" val\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" val\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对属性进行响应式处理")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineReactive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ob"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  ob"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("notify")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" val\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"_2-4、路由-router"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4、路由-router"}},[t._v("#")]),t._v(" 2-4、路由—Router")]),t._v(" "),a("p",[a("strong",[a("u",[a("em",[t._v("基本介绍")])])]),t._v("：")]),t._v(" "),a("p",[t._v("Vue-router 有3种路由模式：hash、history、 abstract：")]),t._v(" "),a("ul",[a("li",[t._v("hash：使用 URL hash 值来作路由；支持所有浏览器，包括不支持 H5 History Api 的浏览器；\n"),a("ul",[a("li",[t._v("依靠 "),a("code",[t._v("onhashchange")]),t._v(" 事件(监听"),a("code",[t._v("location.hash")]),t._v("的改变)；")])])]),t._v(" "),a("li",[t._v("history：依赖 H5 History API 和服务器配置；\n"),a("ul",[a("li",[t._v("依靠的"),a("code",[t._v("H5 history")]),t._v(" 新增的两个方法：pushState() 改变 url 地址且不会发送请求；replaceState() 可读取历史记录栈，还可对浏览器记录进行修改；")])])]),t._v(" "),a("li",[t._v("abstract：支持所有 JS 运行环境，如 Node.js 服务器端；若发现没有浏览器的API，则会自动强制进入此模式；")])]),t._v(" "),a("p",[a("u",[t._v("hash 模式的实现原理")]),t._v("\n早期前端路由的实现就是基于 location.hash，location.hash 值即 URL 中 # 后面的内容(含符号#)；hash 路由模式实现基于以下几个特性")]),t._v(" "),a("ul",[a("li",[t._v("URL 中 hash值只是客户端的一种状态，也即当向服务器端发出请求时，hash 部分不会被发送；")]),t._v(" "),a("li",[t._v("hash 值的改变，都会在浏览器访问历史中增加记录；因此能通过浏览器回退、前进按钮控制 hash 的切换；")]),t._v(" "),a("li",[t._v("可通过 a 标签，并设置 href 属性，当用户点击标签后，URL 的 hash 值就会发生改变；")]),t._v(" "),a("li",[t._v("或可通过 JS 来对 loaction.hash 进行赋值，改变 URL 的 hash值；")]),t._v(" "),a("li",[t._v("可使用 hashchange 事件来监听 hash 值变化，从而对页面进行跳转(渲染)；")])]),t._v(" "),a("p",[a("u",[t._v("history 模式的实现原理")]),t._v("\nH5 提供 History API 来实现 URL 变化；其中最主要的API有：historv.pushState()—新增历史记录、historv.repalceState()—直接替换当前的历史记录；此两个 API 可在不进行刷新的情况下，操作浏览器的历史纪录；history 路由模式实现基于以下几个特性：")]),t._v(" "),a("ul",[a("li",[t._v("pushState 和 repalceState 操作实现 URL 变化；")]),t._v(" "),a("li",[t._v("使用 popstate 事件来监听 url 变化，从而对页面进行跳转(渲染)；")]),t._v(" "),a("li",[t._v("注意：history.pushState() 或 history.replaceState() 不会触发 popstate 事件，所以需要手动触发页面跳转(渲染)；")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pushState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nwindow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replaceState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("strong",[a("u",[a("em",[t._v("实现原理")])])]),t._v("：")]),t._v(" "),a("p",[t._v("根据浏览器功能选择 hash/historyRouter；不管通过 routerLink组件触发还是通过内部 this.router.push/replace 等触发，触发原生事件，hash 触发 onhashchange/popstate，H5 触发 popstate 事件；事件触发后，Router 实例获取当前变化 url 与 router 配置的 url，对比获知要更新的组件，随后获取相关组件相关系列钩子(被销毁组件钩子与新创建组件钩子)、依次执行，然后执行 beforeRouteEnter，然后执行 history.transitionTo 回调 onComplete，渲染，并替换 url；")]),t._v(" "),a("ul",[a("li",[t._v("挂载：获取 newVue({ router })，并挂载到 Vue 根组件 "),a("code",[t._v("this.$options")]),t._v(" 中，然后通过 Vue.use 安装插件，加载 VueRouter install 方法，mixin，beforeCreate，router 实例的 init 方法；使用 Vue.util.defineReactive(..this.router.history.current) 响应触发更新，然后 registerInstance(this,this) 实现对 router-view 的挂载操作(router-view 定义 registerRouterInstance 函数，此方法主要用于 render 操作)；设置代理：this.$router == this._routerRoot.router；使用 Vue.component 注册 RouterLink、RouterView；最后合并钩子；")]),t._v(" "),a("li",[t._v("初始：即实例化 Router，此步发生在挂载前(只有实例化后才能调用 init 方法)，类似 new Router({mode:'history', route: [{}...]})，constructor 中会有一根据环境能力选用合适路由模式——mode，选用顺序为 history、hash、最后才是非浏览器环境下的 abstract；然后根据 mode 实例化相应对象；")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'history'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HTML5History")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hash'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashHistory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fallback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abstract'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractHistory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NODE__ENV")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'production'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("invalid mode: ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("mode"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("实现：通过 history.transitionTo 确定路由的切换操作；通过 history.listen 注册路由变化的响应回调：this.app.forEach(app => app._route = route)")]),t._v(" "),a("li",[t._v("Hash模式：使用 HashHistory 作为演示例子；HashHistory 继承自 History 类，判断(保证 / 开头)，并获取 # 后部分内容；")]),t._v(" "),a("li",[t._v("history.transitionTo：\n"),a("ul",[a("li",[t._v("通过 this.router.match 创建匹配定义 URL 的 router 对象：通过目标路径匹配定义 route 数据，根据匹配到的记录，进行 _createRoute 操作，操作最后返回 router 对象；然后，得到对象后，通过 comfirmTransition 进行跳转操作；confirmTransition 函数：\n"),a("ul",[a("li",[t._v("confirmTransition 函数内部判断是否是需要跳转，若无需跳转，则直接中断返回；若需要跳转，则先得到钩子函数的任务队列 queue；\n"),a("ul",[a("li",[t._v("即将被销毁组件的 beforeRouteLeave 钩子：extractLeaveGuards ( deactivated)；")]),t._v(" "),a("li",[t._v("全局 router before hooks：this.router.beforeHooks；")]),t._v(" "),a("li",[t._v("组件 updated 钩子：extractUpdateHooks (updated)；")]),t._v(" "),a("li",[t._v("将要更新的路由的beforeEnter 钩子：activated.map(m => m. beforeEnter)；")]),t._v(" "),a("li",[t._v("异步组件：resolveAsyncComponents (activated)")])])]),t._v(" "),a("li",[t._v("通过 runQueue 函数来批次执行任务队列中的每个方法；注意：在执行 queue 中钩子时，通过 iterator 来构造迭代器由用户传入 next 方法，确定执行过程(即等待上一钩子执行完才执行下一个)；队列执行完后，处理完成后的回调；回调主要是接入路由组件后期的钩子函数beforeRouteEnter、beforeResolve，并进行队列执行；一切处理完后，执行 transitionTo 回调 onComplete；")])])]),t._v(" "),a("li",[t._v("onComplete 回调中，会调用 updateRoute 方法(因先前进行了双绑，所以会触发渲染)，ensureURL(更新浏览器URL)，readyCbs；")])])]),t._v(" "),a("li",[t._v("H5History模式：同样调用 history.transitionTo，只是监听方法只是使用 popstate 事件，而 hash模式依靠 onhashchange/popstate (支持度)监听；")]),t._v(" "),a("li",[t._v("补充：router 实例调用的 push 实际是 history 方法，通过 mode 来确定匹配 history 的实现方案，从代码可知：\n"),a("ul",[a("li",[t._v("push 调用了 src/util/push-state.js 中被改写过的 pushState 方法，改写过的方法会根据传入的参数 replace?: boolean 来进行判断调用 pushState 还是 replaceState ，同时做了错误捕获；如果 history 无刷新修改访问路径失败，则调用 window.location.replace(url) ,有刷新的切换用户访问地址；同理 pushState 也是这样；这里的 transitionTo 方法主要的作用是：做视图的跟新及路由跳转监测，若 url 没有变化(访问地址切换失败的情况)，在 transitionTo 方法内部还会调用一个 ensureURL 方法，来修改 url；")])])]),t._v(" "),a("li",[t._v("注意：this.router.push 等路由方法，最后还是会调用 this.transitionTo；任何形式的路由相关操作，routerLink 组件还是 this.router.push，最后都会通过 history 触发变更，Vue Router 事件监听后，再进行相关操作(渲染、改变URL)；比如 routerLInk 组件，在 install 注册，在 render 时通过创建 a 标签并绑定相关原生方法，最后调用 router.replace、router.push 方法；")])]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200929083404.png",alt:"截屏2020-09-29 上午8.33.58"}}),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200929083435.png",alt:"截屏2020-09-29 上午8.34.30"}}),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200929083452.png",alt:"截屏2020-09-29 上午8.34.46"}}),t._v(" "),a("h2",{attrs:{id:"_2-5、状态-vuex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5、状态-vuex"}},[t._v("#")]),t._v(" 2-5、状态—Vuex")]),t._v(" "),a("p",[t._v("Duck 不必看源码实现，很多细节内容，了解流程即可(我给你们浓缩了还看，而且那些内容只是截取版，强行看会懵的一愣一愣的!!)")]),t._v(" "),a("p",[a("strong",[a("u",[a("em",[t._v("基本介绍与用法与疑问：")])])])]),t._v(" "),a("ul",[a("li",[t._v("State：定义应用状态的数据结构，可在这里设置默认的初始状态；\n"),a("ul",[a("li",[t._v("注意：Vuex 的单一状态与模块化并不冲突；前者表明实例单一，后者只是独立，但共用此实例；")]),t._v(" "),a("li",[t._v("注意：可通过 mapState 将全局 state 和 getters 映射到当前组件的 computed 计算属性中；")])])]),t._v(" "),a("li",[t._v("Getter：允许组件从 Store 中获取数据，类似 vue 计算属性，主用来过滤数据；\n"),a("ul",[a("li",[t._v("注意：可通过 mapGetters 辅助函数仅将 store 中的 getter 映射到局部计算属性；")]),t._v(" "),a("li",[t._v("注意：改变 state 中状态的唯一途径：显式地提交(commit) mutation，便于跟踪每一个状态变化；")])])]),t._v(" "),a("li",[t._v("Mutation：唯一能更改 store 中数据状态的方法，须是同步函数；")]),t._v(" "),a("li",[t._v("Action：可理解为：通过将 mutations 中，处理数据的方法变为可异步的处理数据的方法，即异步操作数据；view 层通过 store.dispath 来分发 action；")]),t._v(" "),a("li",[t._v("Module：允许将单一 Store 拆分为多个 store 且同时保存在单一的状态树中；")])]),t._v(" "),a("p",[t._v("疑问：开发时，改变数组或对象的数据，但是页面没有更新如何解决？")]),t._v(" "),a("img",{staticStyle:{zoom:"70%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200908132753.png"}}),t._v(" "),a("p",[t._v("**"),a("u",[a("em",[t._v("基本原理：")])]),t._v("**Vuex 即 Vue 专用的状态管理库(多用于组件通信及作为数据中心集中式存储数据)；单例形式存放，利用 Vue 自身响应式机制实现(运行依赖于 Vue 内部数据双向绑定机制)；本质是存放多个对象的仓库；State 存放响应数据(各组件共享的数据中心—从而实现跨组件通讯，数据又完全与各自组件独立)；Vue 组件从 Store 读取数据，若 store 中数据发生改变，依赖数据的组件也会发生更新；"),a("u",[t._v("个人理解")]),t._v("：Vuex 是独立于应用 Vue实例的小型 Vue 实例，初始化时搜集 Store、Action、Mutation 等内容，在组件注入时将 State 绑定到 computed，当数据变化时，dispatch、commit、mutation[type]，并通过内部响应式变化通知订阅者，订阅者监听到变动，数据反映到 computed 中的 State 上，触发渲染；")]),t._v(" "),a("p",[t._v("大致流程：首先，在全局通过 State 存放数据，而所有修改 State 的操作，均须通过 Mutation 进行(Mutation 通过 Action)，同时其还提供订阅者模式以供外部插件调用获取 State 数据更新；然后，所有异步接口均须通过 Action 操作 (常见于调用后端接口异步获取更新数据)；最后根据 State 变化，渲染到视图；")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 引入: import、提供 store，注入 Vue 实例；")]),t._v("\nVue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("use")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Vuex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 store 放入 Vue 创建时的 option 中")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    el"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#app'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    store\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("安装：三方插件统一通过 Vue.use 安装(单例模式避免重复安装)，其会调用插件 install 方法，Vuex.install 中会将 VuexInit 混合进 Vue 钩子中；注意：版本1直接将 VuexInit 放入 init 方法中，版本2则将 VuexInit mixin 进 beforeCreate 钩子中；而 VuexInit 会将 store 注入到 Vue 实例中；同时确保所有组件都公用了全局的同一份 store(根节点执行或使用 store，子组件则直接从父组件中获取 $store)；")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Vuex 的 init 钩子，会存入每一个 Vue 实例等钩子列表")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vuexInit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" options "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// store injection")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 存在 store 其实代表的就是 Root 节点，直接执行 store(function时) 或使用 store(非function)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$store "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("store "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function'")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("store")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("store\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 子组件直接从父组件中获取 $store，以保证了所有组件都公用了全局的同一份 store")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如此便可以在每一个组件中通过 this.$store 访问全局的 Store 实例")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$store "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$store\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v('构建：store 即 Store 实例；Store 构造类初始化内部变量，并主要执行 installModule (初始化module) 以及 resetStoreVM (通过 VM 使 store "响应式")')]),t._v(" "),a("ul",[a("li",[a("p",[t._v("installModule 作用是用为 module 加上 namespace名字空间后，注册 mutation、action 及 getter，同时递归安装所有子 module；")])]),t._v(" "),a("li",[a("p",[t._v('resetStoreVM 通过 vm 重设 store，新建 Vue 对象使用 Vue 内部的响应式实现注册 state 及 computed，关键是 Vuex 内部又 new 了一个 Vue 实例，来实现数据的"响应式化"，运用 Vue 内部提供的数据双向绑定功能来实现 store 的数据与视图的同步更新；')]),t._v(" "),a("ul",[a("li",[a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  存放之前的 vm 对象 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" oldVm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_vm \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bind store public getters")]),t._v("\nstore"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getters "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" wrappedGetters "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_wrappedGetters\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" computed "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历 wrappedGetters，使用 Object.defineProperty 方法为每一个 getter 绑定上get方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如此在组件里访问 this.$store.getter.test 就等同于访问 store._vm.test，也即 Vue 对象的 computed 属性 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEachValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("wrappedGetters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// use computed to leverage its lazy-caching mechanism")]),t._v("\n  computed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_vm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    enumerable"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// for local getters")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  Vue.config.silent 暂时设置为 true，原因是 new 一个 Vue 实例过程中不会报出一切警告 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" silent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Vue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("silent\nVue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("silent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时访问 store._vm.test 也即访问 Vue 实例中的属性")]),t._v("\nstore"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_vm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  data"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" state\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  computed\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nVue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("silent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" silent\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// enable strict mode for new vm")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  使能严格模式，保证修改 store 只能通过 mutation ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("strict"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("enableStrictMode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldVm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  解除旧 vm 的 state 的引用，及销毁旧 Vue 对象 ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dispatch changes in all subscribed watchers")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// to force getter re-evaluation for hot reloading.")]),t._v("\n    store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_withCommit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      oldVm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   Vue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextTick")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" oldVm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("$destroy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 上述两步完成后，即可通过 this.$store.getter.test 访问 vm 中的 test 属性")]),t._v("\n")])])])])])]),t._v(" "),a("li",[a("p",[t._v("单向保证：Store 中 option 有 strict 参数，可控制使用严格模式；resetStoreVM 的 enableStrictMode 即此作用；此时所有 state 修改操作均须通过 mutation 实现，否则会抛出错误；即全局标志位判断；只有正确方法调用标志位才会放开，从而实现 Vuex 单向数据流；")]),t._v(" "),a("ul",[a("li",[a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("enableStrictMode")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("store")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Vuex 利用 vm 的 $watch 方法来观察 ?state，也即 Store 的 state，在它被修改时进入回调")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 回调中用 assert 断言来检测 store._committing，当 store._committing 为 false 时触发断言，抛出异常")]),t._v("\n  store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_vm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("$watch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("state "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'production'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 检测 store 中的 _committing 值，若是 true 代表不是通过 mutation 方法修改")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_committing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("Do not mutate vuex store state outside mutation handlers.")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" deep"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sync"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Store 的 commit 方法中，执行 mutation 的语句")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_withCommit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  entry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitIterator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("handler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("payload"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_withCommit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 withCommit 修改 state 值时，会将 store 的 committing 值置为 true，内部会有断言检查该值")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在严格模式下只允许使用 mutation 来修改 store 中值，而不允许直接修改 store 的数值")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过 commit（mutation）修改 state 数据时，会再调用 mutation 方法之前将 committing 置为 true，")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 然后再通过 mutation 函数修改 state 中数据，此时触发 $watch 中的回调断言 committing 是不会抛出异常的（此时committing为true）")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 而当直接修改 state 数据时，触发 $watch 的回调执行断言，此时 committing 为 false，则会抛出异常")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" committing "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_committing\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_committing "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_committing "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" committing\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])])]),t._v(" "),a("p",[t._v("方法：commit、dispatch、等方法；")]),t._v(" "),a("ul",[a("li",[t._v("commit事件：commit 方法会根据 type 找到并调用 _mutations 中的所有 type 对应的 mutation 方法，然后会执行 _subscribers 中的所有订阅者；")]),t._v(" "),a("li",[t._v("dispatch方法：调用 action 的 dispatch 方法，实则调用 dispatch 方法；\n"),a("ul",[a("li",[t._v("在初始化，registerAction 时，会将推入进 _actions 队列的 action 进行一层封装(wrappedActionHandler)(所以在进行 dispatch 时能够在参数1获取 state、commit 等方法)；封装方法的执行结果 res，会被判断是否是 Promise，不是则进行 Promise 封装；")]),t._v(" "),a("li",[t._v("在真正调用时，dispatch 方法会从 _actions 中取出 type 对应的 ation，只有一个时则直接返回，否则用 Promise.all 处理再返回；")])])]),t._v(" "),a("li",[t._v("watch方法：实则 return this._watcherVM.$watch(() => getter(this.state, this.getters), cb, options)\n"),a("ul",[a("li",[t._v("观察 getter 方法、_watcherVM 是一 Vue 实例，故 watch 就可直接采用 Vue 内部的 watch 特性观察数据 getter 变动；")])])]),t._v(" "),a("li",[t._v("其他 un/registerModule：注册一个动态 module，当业务进行异步加载时，可通过该接口进行注册动态 module；")])]),t._v(" "),a("h2",{attrs:{id:"_2-6、解析-compiler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-6、解析-compiler"}},[t._v("#")]),t._v(" 2-6、解析—Compiler")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200908132806.png",align:""}}),t._v(" "),a("p",[t._v("模板解析这种事，本质是将数据转化为一段html，最开始出现在后端，经过各种处理吐给前端；但随着各种 mv* 兴起，模板解析交由前端处理；")]),t._v(" "),a("p",[t._v("1、Vue complier 将 template 转化成一个 render 函数字符串，编译过程如下：")]),t._v(" "),a("ul",[a("li",[t._v("parse函数：负责解析 template，利用正则生成 AST；")]),t._v(" "),a("li",[t._v("optimize 函数：负责优化静态节点(AST上)(标记无需每次都更新的内容，DIFF 会直接跳过静态节点，以减少比较过程，优化 patch 性能)；")]),t._v(" "),a("li",[t._v("generate 函数：将前两步生成完善的 AST 组装成 render 函数字符串；")]),t._v(" "),a("li",[t._v("render 函数：非转换步骤，但函数字符串需转换成函数才可执行，"),a("code",[t._v("render = new Function(render)，vm.$options.render")])])]),t._v(" "),a("p",[t._v("2、调用 new Watcher 函数，监听数据的变化，当数据发生变化时，Render 函数执行生成 vnode 对象；")]),t._v(" "),a("p",[t._v("3、调用 patch 方法，对比新旧 vnode 对象，通过DOM diff 算法添加、修改、删除真正的 DOM 元素；")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200923124159.png",align:""}}),t._v(" "),a("h2",{attrs:{id:"_2-7、渲染-domdiff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-7、渲染-domdiff"}},[t._v("#")]),t._v(" 2-7、渲染—DOMDIFF")]),t._v(" "),a("p",[t._v("Vue 渲染 redner 就是构建虚拟 DOM，然后才构建到真实 DOM 上去，真实 DOM 与 虚拟 DOM 比对如下：")]),t._v(" "),a("p",[a("strong",[a("u",[t._v("真实 DOM：")])])]),t._v(" "),a("p",[t._v("浏览器渲染引擎流程大致分5步：创建  "),a("code",[t._v("DOM")]),t._v(" 树 —> 创建 "),a("code",[t._v("Style Rules")]),t._v(" -> 构建 "),a("code",[t._v("Render")]),t._v(" 树 —> 布局 "),a("code",[t._v("Layout")]),t._v(" -—> 绘制 "),a("code",[t._v("Painting")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("第一步，构建 DOM 树：用 HTML 分析器，分析 HTML 元素，构建一棵 DOM 树；")]),t._v(" "),a("li",[t._v("第二步，生成样式表：用 CSS 分析器，分析 CSS 文件和元素上的 inline 样式，生成页面的样式表；")]),t._v(" "),a("li",[t._v("第三步，构建 Render 树：将 DOM 树和样式表关联，构建 Render 树(Attachment)；\n"),a("ul",[a("li",[t._v("每个 DOM 节点都有 attach 方法，接受样式信息，返回一个 render 对象，这些对象最终会被构建成一棵 Render 树；")])])]),t._v(" "),a("li",[t._v("第四步，确定节点坐标：根据 Render 树结构，为每个 Render 树上节点确定一个在显示屏上出现的精确坐标；")]),t._v(" "),a("li",[t._v("第五步，绘制页面：根据 Render 树和节点显示坐标，然后调用每个节点的 paint 方法，将它们绘制出来；")])]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200923124057.png"}}),t._v(" "),a("p",[a("strong",[a("u",[t._v("虚拟 DOM：")])])]),t._v(" "),a("p",[t._v("本质是用一原生的 JS 对象去描述一个 DOM 节点(对原生的抽象—性能提升(内存处理/频繁重排避免)、跨平台、无需操作DOM)(借鉴snabbdom、inferno)；")]),t._v(" "),a("p",[t._v("能应对绝大部分应用性能需求，但在某些性能要求极高的应用，虚拟DOM "),a("u",[t._v("无法进行针对性极致优化")]),t._v("；然后当变化产生时，比较虚拟DOM树差异，最后将之应用到真正 DOM 上；(初次渲染或更新时用 JS 对象将 DOM 化为虚拟 DOM，若为更新则按照一定规则(DIff)比对前后虚拟DOM树变化，随后将变化结果应用到真正DOM树上)；")]),t._v(" "),a("p",[a("strong",[a("u",[a("em",[t._v("VueDIFF过程：")])])])]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200923124105.png",align:""}}),t._v(" "),a("p",[t._v("当数据发生改变时，set 方法会触发 Dep.notify 方法，通知所有订阅者 Watcher，订阅者就会调用 patch 给真实 DOM 打补丁，更新相应视图：")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200923124106.png",align:""}}),t._v(" "),a("p",[t._v("首先，正常情况下，Diff 两个树的时间复杂度是 O(n^3)—(旧树、新树、真实树)， 可实际中很少进行跨层级 DOM 移动，故 Vue 将这一流程进行了优化(看下方流程)，将时间复杂度降至 O(n)；Vue 版本与 DOMDIFF 关系：")]),t._v(" "),a("ul",[a("li",[t._v("Vue2 DIFF 采用双端比较(新旧比较)的算法：同时从新旧 children 两端开始进行比较，并借助 key 值找到可复用节点，再进行相关操作；")]),t._v(" "),a("li",[t._v("Vue3 借鉴 ivi 算法和 inferno 算法：创建 VNode 时就确定其类型，在 mount/patch 过程中采用位运算来判断 VNode 类型，并利用动态规划的思想求解最长递归子序列，最后才再配合双端比较的算法，进一步提升性能；")])]),t._v(" "),a("p",[t._v("然后，Vue2 虚拟DOM 映射到真实DOM 要经过 VNode 的 create、diff 、patch 等阶段；Vue.init 初始化，vm.$mounnt 挂载 -> return mountCompent(this, el, …) -> 实例化 Watcher，然后再在里面调用 "),a("u",[t._v("updateComponent")]),t._v(" -> vm.render 将实例渲染为 VNode(使用 createElement 创建 VNode) -> vm.update (vnode, …) -> "),a("code",[t._v("vm.__patch__")]),t._v("(核心方法：完成 preVnode 与 vnode 的 DIFF 并按需为 vdom 节点 patch)，最后生成新的真实 DOM 以完成视图更新操作；")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("vm.__patch__")]),t._v("：先用 sameVnode 比对新旧 Vnode 基本属性，若同则认为发生局部更新，然后 DIFF；否则直接跳过 DIFF，根据 vnode 新建真实 DOM，同时删除旧 dom 节点；DIFF：Vue2 Diff 实现主要通过两个方法：patchVnode(oldVnode, vnode)(及其 updateChildren 方法)：")])]),t._v(" "),a("li",[a("p",[t._v("patchVnode如下：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("首先，若新旧树存在节点，且 if (oldVnode === vnode)，引用一致，无变化；")])]),t._v(" "),a("li",[a("p",[t._v("然后，若新旧树存在节点，节点相同且为文本节点，则先进行文本节点判断，oldVnode.text !== vnode.text，不同则通过 Node.textContent = vnode.text 更换；")])]),t._v(" "),a("li",[a("p",[t._v("然后，若新旧树存在节点，节点相同且非文本节点，若含有子节点且不相同，if( oldCh && ch && oldCh !== ch)，则进入子节点 DIFF(DIFF核心)，即调用 updateChildren 比较；即同级比较(只有两个新旧节点是相同节点时，才会去比较各自子节点)(优点也是缺点，前因省去大量比较，后因省去底层比较，浪费严重(分情况讨论))；也即只更新差异部分的 DOM，以减少更新量，提升效率；")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("updateChildren 首先会通过判断两节点的 key、tag、isComment、data同时定义或不定义，及当标签类型为 input 时 type 类型来确定两节点是否相同；若不是则将新节点替换旧节点，若相同则进入 pathVNode，如此迭代下去；")])]),t._v(" "),a("li",[a("p",[t._v("updateChildren 比较流程(夹逼法)：oldCh 和 newCh 各有两个头尾的变量 oldStartIndex、oldEndIndex & newStartIndex、newEndIndex 之间两两相互比较，变量会往中间靠拢，一旦 Startldx > Endldx 则表明 oldCh 和 newCh 至少有一个已遍历完，就会结束比较；")])]),t._v(" "),a("li",[a("p",[t._v("优化：通过模版编译时的静态标记来跳过静态节点比较；")])]),t._v(" "),a("li",[a("p",[t._v("优化：通过 key 尽可能的复用DOM元素(同级且父节点一致才可复用)；key 是 vnode 的唯一标记， 通过 key，有助于 DIFF 过程高效准确：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("更准确：新旧 children 中的节点只有顺序是不同时，最佳操作应是通过移动元素位置来实现更新目的；(DIFF 比较是为了在新旧节点中找到相同节点，所以增加 Key 有利于节点复用，以快速找到相同节点而无需递归查找)；")])]),t._v(" "),a("li",[a("p",[t._v("更快速：利用 key 的唯一性，在新旧 children 节点中保存映射关系 Map，以便能够在旧 children 节点中快速找到可复用节点；")])]),t._v(" "),a("li",[a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createKeyToOldIdx")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" beginIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" endIdx")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" beginIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" endIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tkey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" children "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isDef")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" map \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])])])]),t._v(" "),a("li",[a("p",[t._v("然后，若新树存在旧树没有的节点，则调用 createEle(vnode)，vnode.el 已引用了老的 dom节点，故方法会在老 DOM 节点上添加子节点；")])]),t._v(" "),a("li",[a("p",[t._v("最后，若新树不存在旧树子节点，则删除 elm 真实节点下的 oldVnode 子节点；")])])])])]),t._v(" "),a("p",[t._v("最后，应用到真实 DOM 上；DIFF 最终目的是为修改 DOM 树：页面 DOM 树、旧 VNode 树、新 Vnode 树；")]),t._v(" "),a("ul",[a("li",[t._v("页面 DOM 树与旧 VNode  树节点一一对应，而新 Vnode 树则是表示更新后页面 DOM 树 该有的样子；\n"),a("ul",[a("li",[t._v("注意：在旧 Vnode 树与新 Vnode 树 进行比较过程中：不会对此两棵 Vode 树进行修改，而是以比较的结果，直接对真实 DOM 进行修改；")]),t._v(" "),a("li",[t._v("比如：旧 Vnode 树同一层中，找到与新 Vnode 树中一样但位置不同的节点，此时需要移动节点，但不是移动旧树中节点，而是直接移动 DOM；")]),t._v(" "),a("li",[t._v("即新旧 Vnode 树是拿来比较，最后只用比较结果对页面 DOM 树进行修改；")])])])]),t._v(" "),a("p",[t._v("所以，Vue DOMDIFF 体现了：")]),t._v(" "),a("ul",[a("li",[t._v("首先，找到 不需要移动的相同节点(文本节点)，消耗最小；")]),t._v(" "),a("li",[t._v("然后，再找相同但是需要移动的节点，消耗次小；")]),t._v(" "),a("li",[t._v("最后，找不到才会去新建/删除节点，兜底处理；")])]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200923124107.png",align:""}}),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200923124108.png",align:""}}),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200908132803.png"}}),t._v(" "),a("p",[a("strong",[a("u",[a("em",[t._v("DOM Diff 比较示例")])])]),t._v("：")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200923124112.png",align:""}}),t._v(" "),a("p",[t._v("首轮，父节点相同，符合规则，进行子节点比较，进行第一流程：先找无需移动的相同节点，找到节点 2，根据比较结果，无需修改 DOM，则保留原位置；")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200923124113.png",align:""}}),t._v(" "),a("p",[t._v("二轮，再无"),a("u",[t._v("相同且无需移动的节点")]),t._v("，进行第二流程：找"),a("u",[t._v("相同但是需要移动的节点")]),t._v("，找到节点 5，根据比较结果，需要移动 DOM；")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200923124114.png",align:""}}),t._v(" "),a("p",[t._v("三轮，无相同节点，进行流程三，新建或删除节点，在旧 Vnode 中，若新 Vnode 不存在的节点要删除，在新 Vnode 中，旧 Vnode 不存在节点要新建；")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200923124115.png",align:""}}),t._v(" "),a("p",[t._v("最后，页面更新完毕；")]),t._v(" "),a("h2",{attrs:{id:"_2-8、钩子-生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-8、钩子-生命周期"}},[t._v("#")]),t._v(" 2-8、钩子—生命周期")]),t._v(" "),a("p",[t._v("Vue 实例有一个完整的生命周期，也即从开始创建、初始化数据、编译模版、挂载DOM->渲染、更新->渲染、卸载等一系列过程，称之为 Vue 的生命周期；")]),t._v(" "),a("p",[t._v("创建前/后：")]),t._v(" "),a("ul",[a("li",[t._v("beforeCreate：vue 实例的挂载元素 "),a("code",[t._v("$el")]),t._v(" 和数据对象 data 都是 undefined，尚未初始化；")]),t._v(" "),a("li",[t._v("created：完成 data 数据初始化，但 "),a("code",[t._v("$el")]),t._v(" 还未初始化；")])]),t._v(" "),a("p",[t._v("载入前/后：")]),t._v(" "),a("ul",[a("li",[t._v("beforeMount：vue 实例的 "),a("code",[t._v("$el")]),t._v(" 和 data 均已初始化，相关 render 函数首次被调用；实例已完成以下配置：编译模板，将 data里的数据和模板生成html；但注意此时还未挂载 html 到页面上；")]),t._v(" "),a("li",[t._v("mounted："),a("code",[t._v("el")]),t._v(" 被新创建的 "),a("code",[t._v("vm.$el")]),t._v(" 替换，并挂载到实例上后调用；实例已完成以下配置：用上面编译好的 html 内容替换 "),a("code",[t._v("el")]),t._v(" 属性指向的 DOM 对象；完成将模板中的 html 渲染到 html 页面；此过程中进行 ajax 交互；")])]),t._v(" "),a("p",[t._v("更新前/后：")]),t._v(" "),a("ul",[a("li",[t._v("beforeUpdate：在数据更新前调用，发生在虚拟 DOM 重新渲染和打补丁前；可在此钩子中进一步地更改状态，且不会触发额外的重渲染过程；")]),t._v(" "),a("li",[t._v("updated：在由于数据更改导致的虚拟 DOM 重新渲染和打补丁后调用；调用时，组件 DOM 已更新，故可执行依赖于 DOM 的操作；但注意：大多数情况下，应避免在此期间更改状态，因可能会导致更新无限循环(使用 this.$nextTick 缓解)；该钩子在服务器端渲染期间不被调用；")])]),t._v(" "),a("p",[t._v("销毁前/后：")]),t._v(" "),a("ul",[a("li",[t._v("beforeDestroy：在实例销毁前调用；实例仍然完全可用；")]),t._v(" "),a("li",[t._v("destroyed：在实例销毁后调用；调用后所有的事件监听器会被移除，所有子实例也会被销毁；该钩子在服务器端渲染期间不被调用；")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("生命周期")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("beforeCreate")]),t._v(" "),a("td",[t._v("组件实例被创建之初，组件的属性生效前")])]),t._v(" "),a("tr",[a("td",[t._v("Reated")]),t._v(" "),a("td",[t._v("组件实例已经完全创建，属性也绑定，但真实dom还没有生成，"),a("code",[t._v("$el")]),t._v(" 还不可用")])]),t._v(" "),a("tr",[a("td",[t._v("beforeMount")]),t._v(" "),a("td",[t._v("在挂载开始之前被调用：相关的 render 函数首次被调用")])]),t._v(" "),a("tr",[a("td",[t._v("mounted")]),t._v(" "),a("td",[t._v("el 被新创建的 vm.$el 替换，并挂载到实例上，之后调用该钩子")])]),t._v(" "),a("tr",[a("td",[t._v("beforeUpdate")]),t._v(" "),a("td",[t._v("组件数据更新之前调用，发生在虚拟 DOM 打补丁前")])]),t._v(" "),a("tr",[a("td",[t._v("update")]),t._v(" "),a("td",[t._v("组件数据更新之后")])]),t._v(" "),a("tr",[a("td",[t._v("activited")]),t._v(" "),a("td",[t._v("keep-alive 专属，组件被激活时调用")])]),t._v(" "),a("tr",[a("td",[t._v("deactivated")]),t._v(" "),a("td",[t._v("keep-alive 专属，组件被销毁时调用")])]),t._v(" "),a("tr",[a("td",[t._v("beforeDestory")]),t._v(" "),a("td",[t._v("组件销毁前调用")])]),t._v(" "),a("tr",[a("td",[t._v("destoryed")]),t._v(" "),a("td",[t._v("组件销毁后调用")])])])]),t._v(" "),a("ul",[a("li",[a("u",[t._v("发起异步请求时机")]),t._v("：可在钩子函数 created、beforeMount、 mounted 中进行调用，这三个钩子中，data 已经创建，可将服务端端返回的数据进行赋值；而在 created 钩子中调用异步请求还有以下优点：\n"),a("ul",[a("li",[t._v("更快获取到服务端数据，减少页面 loading 时间；")]),t._v(" "),a("li",[t._v("ssr不支持 beforeMount、mounted 钩子函数，放在 created 有助于确保一致性；")])])]),t._v(" "),a("li",[a("u",[t._v("操作 DOM 时机")]),t._v("：在钩子函数 mounted 被调用前，Vue 已将编译好的模板挂载到页面上，故在 mounted 中即可访问操作 DOM；")])]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200908132752.png"}}),t._v(" "),a("p",[a("strong",[a("u",[a("em",[t._v("父子组件生命周期执行顺序")])])]),t._v("：Vue 父组件和子组件生命周期钩子函数执行顺序可为以下 4 部分：")]),t._v(" "),a("ul",[a("li",[t._v("加载渲染过程：父beforeCreate ->父created ->父beforeMount ->子beforeCreate ->子created ->子beforeMount ->子mounted ->父mounted；")]),t._v(" "),a("li",[t._v("子组件更新过程：父beforeUpdate ->子beforeUpdate ->子updated ->父updated；")]),t._v(" "),a("li",[t._v("父组件更新过程：父beforeUpdate ->父updated；")]),t._v(" "),a("li",[t._v("销毁过程：父beforeDestroy ->子beforeDestroy ->子destroyed ->父destroyed")])]),t._v(" "),a("p",[t._v("总即：组件调用顺序是：先父后子，渲染完成顺序是：先子后父；")]),t._v(" "),a("p",[t._v("总即：组件销毁顺序是：先父后子，销毁完成顺序是：先子后父；")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注意：父组件监听子组件生命钩子调用方式：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方式1: 通过 $emit 触发父组件事件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Parent.vue")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Child @mounted"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"doSomething"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Child. vue")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mounted")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("$emit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v('"mounted”'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n             \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方式2: 在父组件引用子组件时, 通过 @hook 监听")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Parent. vue")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Child @hook "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("mounted"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"doSomething"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Child"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomething")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... B")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Child. vue")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mounted")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... A")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以上输出顺序为: A -> B")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// @hook 方法不仅可监听 mounted, 还可监听其它生命周期事件，比如 created, updated 等")]),t._v("\n")])])]),a("h2",{attrs:{id:"_2-9、其他-cwm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-9、其他-cwm"}},[t._v("#")]),t._v(" 2-9、其他—CWM")]),t._v(" "),a("p",[t._v("即 computed/watch/methods；")]),t._v(" "),a("p",[a("strong",[a("u",[a("em",[t._v("computed浓缩：")])])])]),t._v(" "),a("p",[t._v("computed 计算就是调用设置的 get 函数，然后得到返回值；其能控制缓存的重要一点是它的属性：脏数据标志位 dirty；")]),t._v(" "),a("ul",[a("li",[t._v("当 dirty 为 true 时，读取 computed 会重新计算")]),t._v(" "),a("li",[t._v("当 dirty 为 false 时，读取 computed 会使用缓存")])]),t._v(" "),a("p",[t._v("1、开始每个 computed 新建自己的 watcher 时，会设置 watcher.dirty = true，以便于 computed 被使用时，会计算得到值；")]),t._v(" "),a("p",[t._v("2、当依赖数据发生变化后，通知 computed 时，会设置 watcher.dirty = true，以便于其他地方重新渲染、重新读取 computed 时，computed 重新计算")]),t._v(" "),a("p",[t._v("3、当 computed 计算完成后，会设置 watcher.dirty = false，以便于其他地方再次读取时，使用缓存，免于计算；")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("data C 开始变化后.......")])]),t._v(" "),a("li",[a("p",[t._v("通知 computed B watcher 更新，并只重置脏数据标志位 dirty = true，而不会计算值；")])]),t._v(" "),a("li",[a("p",[t._v("通知 页面 A watcher 进行更新渲染，进而重新读取 computed B ，然后 computed B 开始重新计算；")])])]),t._v(" "),a("p",[t._v("为什么 data C 能通知 页面 A：因为 data C 的依赖收集器会同时收集到 computed B 和 页面 A 的 watcher")]),t._v(" "),a("p",[t._v("为什么 data C 能收集到 页面A 的watcher：因为 computed 在 页面 A 在读取 computed B 时，data C 就会收集到页面A watcher")]),t._v(" "),a("p",[t._v("为什么 computed 能够更新：因为被依赖通知更新后，computed 重置了脏数据标志位(放开权限)，允许页面读取 computed 时再更新值；")]),t._v(" "),a("p",[a("strong",[a("u",[a("em",[t._v("computed流程：")])])])]),t._v(" "),a("p",[a("u",[t._v("初始化时")]),t._v("：init—>initComputed—>页面初次渲染，此时 Dep.target 为页面 Watcher—>触发用 createComputed包装的 get 函数 createComputedGetter，createComputedGetter 主要执行了："),a("code",[t._v("if (watcher.dirty) { watcher.evaluate(); }")]),t._v("、"),a("code",[t._v("if (Dep.target) { watcher.depend(); }")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("前者：执行前者；此时 watcher.dirty = true，因使用的是 lazy 的初始值 (initComputed 中 "),a("code",[t._v("new Watcher(vm, getter, { lazy: true });")]),t._v(")，所以 "),a("code",[t._v("watcher.evaluted")]),t._v(" 可以被调用 (注意：调用完毕就要设置 dirty 为 false，此后除非与 computed 相关 data  发生变化，否则不会触发，即此值控制着缓存，是 computed 的核心实现)，随即 "),a("code",[t._v("computed.watcher.get")]),t._v(" 被调用，进行 "),a("code",[t._v("pushTarget")]),t._v("，导致 "),a("code",[t._v("Dep.target")]),t._v(" 被修改为 computed-watcher，而原来的值(页面 Watcher)会先被缓存到 targetStack 中；同时，computed 的计算会读取 data，因为双绑机制，此时 data 就能收集到 computed-watcher，即computed-watcher 也会保存到 data 的依赖收集器 dep.subs 中；随后，computed 计算完毕，执行 popTarget，释放 Dep.target，并将 Dep.target 恢复上一个 watcher(页面watcher)；")])]),t._v(" "),a("li",[a("p",[t._v("后者，执行后者；即 "),a("code",[t._v("watcher.depend")]),t._v("，即执行 "),a("code",[t._v("dep.addSub(Dep.target)")]),t._v("，目的是让 data 再收集一次 Dep.target， 即收集页面 watcher；")])]),t._v(" "),a("li",[a("p",[t._v("此时，"),a("code",[t._v("data 的依赖收集器 = [ computed-watcher, 页面-watcher]")])])])]),t._v(" "),a("p",[a("u",[t._v("数据更新时")]),t._v("：即 computed 所依赖的 data 更新时，触发 "),a("code",[t._v("dep.nodify")]),t._v("，依次触发依赖数组下的每一watcher：")]),t._v(" "),a("ul",[a("li",[t._v("先执行 computed-watcher 计算值(调用了 "),a("code",[t._v("watcher.update")]),t._v("，而其中包含了 "),a("code",[t._v("if (this.lazy) this.dirty = true;")]),t._v("，但注意此时尚未计算结果，只是控制计算的阀门打开，计算行为由 "),a("code",[t._v("watcher.evaluate()")]),t._v(" 负责，而此方法在 "),a("code",[t._v("get:createComputedGetter(key),")]),t._v("，注意 get，所以 get 时，也即页面渲染时，读取值时才做真正计算 )；")]),t._v(" "),a("li",[t._v("再执行页面-watcher 渲染页面做真正计算；")]),t._v(" "),a("li",[t._v("即 data 改变，正序遍历通知，computed 先更新，页面再更新，所以页面才能读取到最新的 computed 值；")])]),t._v(" "),a("p",[a("u",[t._v("最后总结")]),t._v("：由双绑控制变化的触发，值相等则不触发，值不等才触发 watcher.update，而平时的刷新渲染不会触发 computed 的计算求值，因为 watcher.dirty 为 false，但 watcher 监听属性则会随着页面刷新而触发，即使它所绑定的值未发生值变化，因为它没有设置 watcher.dirty 变量去阻止；所以可以理解为 computed 计算属性是带有 dirty 标记的 watch，也正因为通过此标记，才能阻止不随页面刷新而计算；")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200923124201.png",align:""}}),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200923124202.png",align:""}}),t._v(" "),a("p",[a("strong",[a("u",[a("em",[t._v("三者的对比：")])])])]),t._v(" "),a("p",[t._v("computed：计算属性，依赖其它属性值，有缓存性，只有所依赖属性值发生改变，下一次获取 computed 时才会重新计算新值；")]),t._v(" "),a("ul",[a("li",[t._v("本质是一个惰性求值的观察者，其内部实现了一个具有缓存功能的 watcher，也即 computed watcher，watcher 不会立刻求值，同时其持有一个 dep 实例；实例内部通过 this.dirty 属性标记计算属性是否需要重新求值；然后，当 computed 的依赖状态发生改变时，就会通知这个惰性的 watcher；然后，computed watcher 通过  this.dep.subs.length 判断有没有订阅者：\n"),a("ul",[a("li",[t._v("若有则会重新计算，然后对比新旧值，有变化就会重新渲染；注意：Vue 想确保不仅是计算属性依赖的值发生变化就触发渲染，而是当计算属性最终计算的值发生变化，才会触发渲染 watcher 重新渲染，本质上是一种优化；")]),t._v(" "),a("li",[t._v("若无则仅将 this.dirty = true；注意：当计算属性依赖于其他数据时，属性并不会立即重新计算，只有之后其他地方需要读取属性时，它才会真正计算，即具备 lazy 特性；")])])]),t._v(" "),a("li",[t._v("注意：computed 是在 DOM加载后马上执行，比如赋值操作；")]),t._v(" "),a("li",[t._v("注意：计算属性计算时所依赖的属性一定是响应式依赖，否则计算属性不会执行；")]),t._v(" "),a("li",[t._v("注意：计算属性是基于依赖进行缓存，若依赖无更新，调用计算属性并不会重新计算，因此可减少开销，只有在其依赖的属性值改变后的下一次获取computed 值时才会重新调用对应的 getter 来计算出相应新值；")])]),t._v(" "),a("p",[t._v("watch：侦听器，多起观察作用，无缓存性，可以监听某些数据执行回调，每当监听的数据变化时，都会执行回调进行后续操作；")]),t._v(" "),a("ul",[a("li",[t._v("注意：当需要进行深度监听对象中属性时，可打开 deep: true 选项，这样便会对对象中的每一项进行监听，虽会带来性能问题，但可使用字符串形式监听来优化；此外如果没有写到组件中，需要注意使用 unWatch 手动注销；")])]),t._v(" "),a("p",[t._v("methods：方法，无缓存性，不像 computed 在 DOM 加载后可自动执行，必须有一定触发条件才被执行，如点击事件等；")]),t._v(" "),a("ul",[a("li",[t._v("区别：与 computed 区别在于：前者必须有一定的触发条件才能执行，比如重渲染，异步绑定事件等；而后者则基于它的依赖进行缓存，若多次访问的时候(值不变情况下)，计算属性会立即返回数据，而不必再次执行函数，另外还可自动执行(依赖变化且被读取)；")])]),t._v(" "),a("p",[a("strong",[a("u",[a("em",[t._v("三者使用场景对比:")])])])]),t._v(" "),a("ul",[a("li",[t._v("当数值计算并依赖于其它数据、计算耗性能的计算场景、模板表达式过于复杂时、复杂渲染数据的计算、不必重新计算数值，可利用 computed 缓存特性，避免每次获取值时都重新计算；")]),t._v(" "),a("li",[t._v("当需要在数据变化时执行异步或开销较大操作时，可使用 watch，注意限制执行该操作的频率，并在得到最终结果前，设置中间状态；")]),t._v(" "),a("li",[t._v("注意：能使用 watch 属性的场景基本上都可使用 computed 属性，且 computed 属性开销小性能高，故因尽量使用 computed 属性，除非要执行异步或昂贵的操作以响应不断变化的数据；")]),t._v(" "),a("li",[t._v("比如：点击搜索按钮的时候才进行数据的响应和操作，使用 computed；获取当前时间，使用 methods；")])]),t._v(" "),a("h2",{attrs:{id:"_2-10、其他-nexttick"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-10、其他-nexttick"}},[t._v("#")]),t._v(" 2-10、其他—NextTick")]),t._v(" "),a("p",[t._v("官方描述：在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM；(nextTick 在下次DOM更新循环结束后执行延迟回调；主要使用了宏&微任务，并根据环境分别尝试使用 Promise、MutationObserver、setlmmediate、setTimeout)")]),t._v(" "),a("p",[t._v("个人理解：Vue 向外暴露的接口，通过微任务实现渲染后的即时数据操作，但为了兼容性考虑，甚至使用宏任务去向下降级；")]),t._v(" "),a("p",[t._v("Vue 并非每次数据变化即进行页面的渲染更新操作，而是通过异步来实现 DOM 更新；")]),t._v(" "),a("p",[t._v("首先，只要观察到数据变化，Vue 就会开启一个队列，并缓冲在同一事件循环中发生的所有数据改变；若同个 watcher 被多次触发，则最好只会被推入一次，以减少不必要的计算和 DOM 操作；")]),t._v(" "),a("p",[t._v("然后，在下一事件循环 tick 中，Vue 刷新队列并执行相关方法；")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("microtask 因其高优先级特性，能确保队列中的微任务在一次事件循环前被执行完毕；")])]),t._v(" "),a("li",[a("p",[t._v('回顾：主线程的执行过程就是一个 tick，而所有的异步结果都是通过"任务队列"来调度；比如消息队列中存放的是一个个的任务 (task)；规范中规定 task 分为两大类，分别是 macro task(宏) 和 micro task(微)，且每个 macro task 结束后，都要清空所有的 micro task；')])]),t._v(" "),a("li",[a("p",[t._v("Vue 内部对异步队列，会依次尝试使用原生 Promise.then、MutationObserver、setlmmediate，若执行环境均不支持，则会采用 setTimeout(fn, 0)代替；在 vue2.5 源码中，macrotask 降级的方案依次是：setlmmediate、 MessageChannel、 setTimeout；")])])]),t._v(" "),a("p",[t._v("比如：vm.someData = 'new value' 后，在同一事件循环内，组件不会立即渲染；而是在队列刷新时，组件才会在事件循环队列清空时的下一 \"tick\" 更新；")]),t._v(" "),a("p",[t._v("问题：难以在 DOM 状态更新后立即做某些处理；")]),t._v(" "),a("p",[t._v("解决：为实现上述场景，可在数据变化后立即使用 Vue.nextTick(callback)；如此回调会在 DOM 更新完成后立即调用；")]),t._v(" "),a("p",[t._v("注意：Vue 在版本2.4—2.6中，对 "),a("code",[t._v("nextTick")]),t._v(" 的反复改动，是浏览器对微任务的兼容性问题影响、宏微任务特点衡量的结果；")]),t._v(" "),a("ul",[a("li",[t._v("若 Vue 使用"),a("u",[t._v("宏任务函数")]),t._v("，则势必要等待UI渲染完成后的下一个"),a("u",[t._v("宏任务")]),t._v("执行；")]),t._v(" "),a("li",[t._v("若 Vue 使用"),a("u",[t._v("微任务函数")]),t._v("，则无需等待UI渲染完成即可进行 nextTick 回调；")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 修改数据")]),t._v("\nvm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("msg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// DOM 还没有更新")]),t._v("\nVue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextTick")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// DOM 更新了")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作为一个 Promise 使用 (2.1.0 起新增，详见接下来的提示)")]),t._v("\nVue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextTick")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// DOM 更新了")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2.1.0 起新增：若无提供回调且在支持 Promise 的环境中，则返回一个 Promise；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注意 Vue 不自带 Promise 的 polyfill，所以若目标浏览器不原生支持 Promise，得自己提供 polyfill... =。=")]),t._v("\n")])])]),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200923124203.png",align:""}}),t._v(" "),a("h2",{attrs:{id:"_2-11、keepalive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-11、keepalive"}},[t._v("#")]),t._v(" 2-11、KeepAlive")]),t._v(" "),a("p",[t._v("keep-alive 是 Vue内置的一个组件，可使被包含的组件保留状态，避免重新渲染，一般结合路由和动态组件一起使用，用于缓存组件：")]),t._v(" "),a("p",[t._v("keep-alive 可实现组件缓存，在组件切换时不会对当前组件进行卸载 (即将组件包含在 keep-alive 元素，组件就会被缓存，在组件切换时就不会重新渲染而是直接使用，响应速度也更快)；常用的两个属性 include/exclude 允许组件有条件的进行缓存，两者都支持字符串或正则表达式")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("include 表示只有名称匹配的组件会被缓存；")])]),t._v(" "),a("li",[a("p",[t._v("exclude 表示任何名称匹配的组件都不会被缓存，其中 exclude 优先级比 include 高；")])]),t._v(" "),a("li",[a("p",[t._v("两个钩子 activated/deactivated，用来得知当前组件是否处于活跃状态；当组件被激活时，触发钩子 activated，当组件被移除时，触发 deactivated；")])])]),t._v(" "),a("p",[a("strong",[a("u",[a("em",[t._v("KeepAlive 实现原理与缓存策略")])])]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("首先，获取 keep-alive 包裹着的第一个子组件对象及其组件名：getFirstComponentChild；")]),t._v(" "),a("li",[t._v("然后，根据设定的 include/exclude 进行条件匹配，决定是否缓存；不匹配，则直接返回组件实例；")]),t._v(" "),a("li",[t._v("然后，根据组件 ID 和 tag 生成缓存 Key，并在缓存对象中查找是否已缓存过该组件实例；\n"),a("ul",[a("li",[t._v("若存在，则直接取出缓存值并更新该 key 在 this.keys 中的位置 (更新 key 的位置是实现 LRU 置换策略的关键)")])])]),t._v(" "),a("li",[t._v("然后，在 this.cache 对象中存储该组件实例并保存 key 值；")]),t._v(" "),a("li",[t._v("然后，检查缓存的实例数量是否超过 max 设置值，若超过则根据 LRU 置换策略删除最近最久未使用的实例(即是下标为0的那个key)；\n"),a("ul",[a("li",[t._v('LRU(Least recently used)，缓存淘汰算法，根据数据历史访问记录来进行淘汰数据，核心思想是"若数据最近被访问过，则将来被访问的几率也更高"')]),t._v(" "),a("li",[t._v("keep-alive 的实现正是利用了 LRU 策略，将最近访问的组件 push 到 this.keys 末尾，this.keys[0] 也即最久没被访问的组件；")])])]),t._v(" "),a("li",[t._v("最后，将组件实例的 keepAlive 属性设置为 true，此在渲染和执行被包裹组件的钩子函数会用到；")])]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://leibnize-picbed.oss-cn-shenzhen.aliyuncs.com/img/20200908132805.png",align:""}})])}),[],!1,null,null,null);s.default=n.exports}}]);